// Compile with: g++ -std=c++0x -g -O2 -march=native -mtune=native hash_1536_24_x3_pf.cpp -o hash_1536_24_x3_pf -lcrypto -lm

#include <cstring> // memcpy
#include <iostream>
#include <sstream>
#include <iomanip>
#include <openssl/rand.h> // For RAND_bytes(.)

#define WORDSIZE 64

//#define VERBOSE

typedef unsigned int uint32;
typedef unsigned long uint64;
typedef __uint128_t uint128;
typedef unsigned char uchar;
typedef uint64 word;
typedef uint128 doubleword;

// Globals
// Security level M = 256
uint32 n = 64;
uint32 t = 24;
uint32 N = 1536;
word prime = 0xfffffffffffffeff; // Solinas, 2^64 - 2^8 - 1

// MDS Matrix
word mds_matrix[24][24] =
  {{0x0aaaaaaaaaaaaaa0, 0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be},
  {0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550},
  {0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc},
  {0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3},
  {0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500},
  {0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e},
  {0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682},
  {0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8},
  {0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74},
  {0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644},
  {0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b},
  {0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580},
  {0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63},
  {0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440},
  {0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571},
  {0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da},
  {0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7},
  {0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc},
  {0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8},
  {0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b},
  {0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e},
  {0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0},
  {0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3},
  {0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3, 0xdf15f15f15f15e36}};

// Round constants (1104 = (6 + 40) * 24)
word round_constants[1104] = {0xb704f0114723e7b6, 0x2b777e13e5ed78ff, 0xcc6a2c6313303f7e, 0xa5fb17cb0503a886, 0xa6ff8ca11372c552, 0xa378dc081fe01865, 0x219915b89ba19075, 0xf1f069bf29199142, 0x546c0f029f5446d8, 0xd5da0a1b95806211, 0x438ea7942c973791, 0xbcbc50f2162efa8b, 0xbcb2551bcf0f4e16, 0xf0992ff4b6aa0455, 0x0fb6466cc023e5d2, 0x5bf1b256b3c02f3b, 0xf3b785a0fdca9192, 0x8ce2bd9a6b20d4a5, 0x8e3f005d4457e70d, 0xebe40b0d1e4180e5, 0xe1422eaab5364a20, 0x80bd861ef03c67f8, 0x07512afb0ba295b7, 0x1b2197f73f6254a0, 0xcf87414c0b874601, 0x0fb28bc94a28dfbc, 0x6398968fa872d048, 0xfdf5b4b69d36dbe5, 0x665e7e9eb9ecd936, 0x05cbd0100b42e014, 0x0b0ac80f75ca38eb, 0xdfa7f599c3d8d4be, 0x8d9a7e7ab497ac94, 0x3c7ed0ec4f444d51, 0xaeb7fedb4eef92ed, 0x93530c0865954dcf, 0x178d7b9b7ce804ef, 0x750c77648f8e10cf, 0xc19a5453127f01b9, 0x4f79a773b2a8f0d8, 0x1283041b606830a4, 0xa464c9460456b91e, 0xd861cad8854bbf16, 0x757602b24cdb4a14, 0x4e09e9a6eb0822bf, 0x795c00af7da568e8, 0xeea2edb87d3627aa, 0xbc9561291042763d, 0xc90c97cf633cc60d, 0x32288dd8a70c7ee7, 0x8ea3505af6f92771, 0xb6adb0685acd9aa1, 0x93b78882ed69e019, 0x6412e8650eceecb4, 0x3f3cf85c8d35bb0c, 0xedf6bb3eda85a378, 0xc57b445d71b33e0a, 0xe0a7d97d9ce512dc, 0x322288998b3fb5b4, 0x4090fe394cbd4e2e, 0x235fadbd25925e61, 0x1b38f7a058ab80dc, 0x8cf48476158ca7df, 0x13191df22411715a, 0xa61cf88b4ff48e55, 0x3a11ec8d2eb2f510, 0x1bee233c827e66b7, 0x26d7deb57e4031fe, 0x9c32f1818c6c8edd, 0xe866f55c7c87bb77, 0x8cfc766778be039e, 0xd8f7ce58af71780b, 0x61e25baed66a4b27, 0x5a69e20558e69923, 0x374f8cee1ddc6aca, 0x26dd45761ec53d00, 0x0a1bdbb793a4cdfe, 0x99b507d9068d2289, 0x27621e4f4e4a888a, 0x66e5b818d3610061, 0xff72439fa13396ae, 0x8de343678aeb96e4, 0xe6224bd64c145e4c, 0xe6f159c6557b8ea5, 0xeb282116d2af6fcc, 0x7268905bceb58997, 0x513ee0e139066be0, 0x1928ccd675390aad, 0x91e32cf6db29bbc3, 0x48c0b6439e0a329a, 0xe31b25132c47de16, 0x4c56a7850692c26b, 0xc07630d48b1d1db2, 0xd3bd11aadc628f95, 0x7019bb29f72e7131, 0x3e7a7cceae620601, 0xa4af7a938efecb9b, 0xa8b5362f6d500d75, 0x585b5833595a49e8, 0xa8c0512566049622, 0x10c244a9403a0b00, 0xc0aac064c79f567e, 0xf345b4b8bb00cf0e, 0xce24133c76dd8e95, 0x15cfdb7147aec638, 0x4e18611a8bc8cf31, 0x63c28ed54f1d975e, 0x94126257fdba87d0, 0x8ee028a0bbe2cb66, 0xec0970b7fff41b7b, 0xca60d1b3aba08a2f, 0xd8e40d5749f65ae2, 0xce20b3c6d1131799, 0xded2b183b4909f8f, 0xade83b40149beed4, 0x08f370fd002311bf, 0x3658fe399b358c43, 0xb8652c4b1985ccf4, 0x1541c6f5a65ae446, 0x1984bd1cbb60d35c, 0x583aa7d3a6b034cb, 0x672bb1f214a41265, 0xff4b49a2dc91637f, 0x3a06745d3c60aa52, 0x2aadab2b103383e0, 0x035ffea21746182c, 0xfd153d1b41546300, 0xee24683aa79cc557, 0x0f7809be555f9e21, 0x8102578085b27374, 0x22b39e7f197043a3, 0x64f62d4e9f0173c0, 0x1b70c94ff60220d7, 0xdce91f61cd225e09, 0xf011175585b16fbb, 0x17188bbf2495a98b, 0xd0a65e3c28954799, 0x153f749f60f187b5, 0xc3cd18145b3417a8, 0x777203448503dbf8, 0x4707c5c4df98192c, 0xeb8a7dc41c09cd28, 0x1443778e4930e7d8, 0x1d57f95ad814c471, 0x5e28942598e1b1e5, 0x7ed2e87c54b05395, 0xd963bb75da5c3769, 0x775736ff29bd6847, 0xd604e9c090e5a0cf, 0xb71e68629602e1a5, 0x62c15c407669fda9, 0xeff9f1f074a9da22, 0x508b56d3ee2aae40, 0x2793061e761b647d, 0x0523d7ae5747304f, 0x39b8900acaab6267, 0xda139c07e2d0656c, 0x700bdb195f9f8618, 0x9bd86f40d9781316, 0x2e7a699bd49d3d74, 0xabdd1946337dc7da, 0xf2fc8c602396c308, 0xcef4253ceb1a67c4, 0xc6fe431a92eeb3e9, 0xd83c72ad899e5c8b, 0x72862c63453b3a15, 0x2c264d17b28b5bca, 0x6307a507935f2d2c, 0xba62ba8e9e2ee893, 0x3cbdc13ef2fc439a, 0x96fd38b5553036cd, 0xbf43a71a1c8734ce, 0x4e246abf581ae740, 0xe5f92338e6c50df3, 0x51125dafca7c0c08, 0x1d5744d1f7440b40, 0x8d6eacc589c2d6ff, 0x9e0844860670d2d5, 0x93230788324903b8, 0x3623a269ff975a2c, 0x0a0a868f88d20331, 0x6f75e9c9e7cc35c9, 0x5b9d2ff8e522a678, 0xf7283a3fd2720581, 0x79e214f92445bef2, 0x05075408d7daf080, 0xda10e0ac7ec368e7, 0x137e56ed26bd5d71, 0x4676750a55b3ee5a, 0xbf12878efb931739, 0x23a47379a58f4816, 0xedb3bb42f18b08e0, 0x1b36724b15f7efbd, 0x3d52984428f6c6d2, 0x258e119da5cfc1b4, 0x81e4055f78904253, 0xde9351ee7161dc8d, 0x59b05cf39c3889e7, 0xc36a9f04deee04c6, 0xf6b5a3ff4f5e6e56, 0x8c62ac4c78d3b82f, 0xab8a543f22085d6b, 0xe37bc1e168c434ae, 0x873c3669d143d293, 0x93a13153bc3e910b, 0x39542366266bee85, 0x79755422a6f3d6b1, 0xc757f340e4361494, 0x49b76b3b8958a9fa, 0xe22b605f6a9ba295, 0xe946aae27925331f, 0x372d6534c61c580f, 0x538adbed2c9c5eb9, 0xedbbee2c63925bae, 0xc2cf28268369117e, 0x6ef0d6c8c7c0cbc4, 0xc9723ad1d80314e9, 0x920ed37824ce08b6, 0x7b0302110948211a, 0xf3751e4bbe7b5f9c, 0xda3107ff014ab4fe, 0x9741aeb9ef789d16, 0xb32a83da96efd97d, 0x85473bc2447d697b, 0x8d0309cb5708e98b, 0xd3e29ca2f9a5b2ce, 0x5a2639bf15997e23, 0x18f43c4eda1bc2a4, 0x7cadf0f9ae742136, 0x855a566de931f2ff, 0xccaab4ca634a37db, 0x45212ba6e591e49f, 0x0badb4ef39a0e5c0, 0x4e38a9e69a272cf9, 0xda7ced616b0a263d, 0xc129fae16890527a, 0x15c5ec12fb8245ba, 0x1c4e9b615c696fd0, 0xbfa78f6a18d26c04, 0xb7b0d037d4eb77dc, 0xba65d5e0fea61d9a, 0x2d21c557bcb43003, 0x6b5d09e65b82f0ea, 0x850bac3f8cb94802, 0xc1e499f801c4c904, 0xe103ea49bf03d743, 0x12bb59964d287bf4, 0x052b0707705b143a, 0x5ea07768d8cf1470, 0x6148e715a72aaf39, 0x5ad823923b99a389, 0xb443c20ee17fcf9e, 0x759ee2042e183943, 0xe3ed90d26fb2a5a1, 0x4e07e6273db2685c, 0x7731523c271afac0, 0x5056caa08cf563a5, 0x5179bf63895b1c46, 0xbae69500a340ee54, 0xcd32b8942fe68111, 0x096c88912a08a098, 0xc2dbac53b31717bd, 0x985b204dc9c742a3, 0x3b209fccfa0ea0b8, 0xa64b709ae6022b60, 0x4139a068fac82de0, 0x8df58e5796f3fb95, 0xc4f6159b99143e56, 0xadc244d2a2ec18c8, 0xc47b39fa8734835e, 0x6824da0e65a3ddcc, 0xa407841bfe2c94c2, 0x7fc0eaac399bc368, 0xd7017992ff2ffc97, 0xb78595cc00070393, 0xc7739f7065c7baa4, 0x3f77ef71546529f7, 0xbdb7d441f36b0992, 0x8b48545c288c6d65, 0x4d4140e30cdc8a2b, 0x8de7b65aebab7a61, 0xdbf3004a239090a4, 0xcee711c59c7032a6, 0x584525fbbe4ee4c7, 0xa8bc401f374b149b, 0xf128a8927e963adb, 0xec0eadbabe083031, 0x8d2358103c3de51e, 0xdd4e642fcfb94620, 0x9e2be52a5e88a8f4, 0xba23bbcbb62130d4, 0x974013ccadc56c24, 0x885a2775eb69989d, 0xa8ebf61360bb2af0, 0xdb88c6c647996124, 0x2b59307bc45561e9, 0x01120c5258e2a136, 0x62b076e4612ee129, 0x9eda30754447aef4, 0xdd643302dd3e15f3, 0x5758022946440095, 0xa2f2834fb036e143, 0x732d6688a67bb87e, 0x5d403fe8b0bc65f8, 0x31334b02c3137f89, 0x2294bb74f92312bb, 0x67cc74e8e7cbb0e5, 0x0da35d1ae7321a34, 0xea80fea89adceb94, 0x098b2246166eaea6, 0x85fe2d73e3929756, 0x43c5f6330c4b4ffc, 0xd3d1fb7568073e86, 0xa897267738d31793, 0x8f96ffc72e8c6d2d, 0x7f3e05dd1b13323b, 0xa6cf962f83f3865e, 0x6da7f1b64afa96c4, 0xbbefd7860f94f5da, 0x977b1fdacd9417e7, 0xc96ebf4139b9216b, 0x66e0a92f137dad03, 0x9eb38e5a3b578879, 0xadca2b2411527d02, 0x3005bc4d2a4bc826, 0x137f1228a05c608a, 0xe4c2c455a1e55537, 0x585581bd2e22083a, 0xf08c1731c5e5783e, 0xe1806ec93b47a13d, 0xf7945d104c4d682d, 0xe607fb5317b40f5a, 0x30c172daf5799411, 0x1d2ac5eb33d8d4eb, 0x077011b3d776fad4, 0x53f4980d853922bf, 0xa97d792a4fee9bf6, 0x2846ed021416d341, 0xf48eb1b8e1d12ae5, 0x196e5e995f1f0fc0, 0xcc5b8fb24370b687, 0x9f538b2e364e06f7, 0x1acfd0a3bbabfbd1, 0xd2fc9baf684de7ae, 0x7a4c0fa79e3d95c2, 0x4bfe34215b352a0a, 0xff9f2778ccdfe723, 0x59cab6491a32ce78, 0xe6ae2ce77777a234, 0x277ec967274020cd, 0x50e1c069c060c810, 0xf3233a4f1dabefe5, 0x19ed9fb8cf104abc, 0xc18d9d7d31f2983e, 0xfcf26270041795ff, 0x84ce2f37d28f1cbe, 0x33506708da086fe1, 0x7f861e1657c27b00, 0xf39dc7dc61619673, 0x9fcd843b4fa4fa27, 0x3fb12d91845387b1, 0xfe8f67bf486321b3, 0xb08d6357850f3eba, 0xe540387afcf37308, 0xe87bb3ca8ef1a74e, 0x23b3e9a93a3d5399, 0x0c55f2744b1233cf, 0x2db3c1ca5d6c8f0f, 0xbc98374470a51777, 0x2f8db46bae635091, 0xb3bb2da3ea685de7, 0xaec01195a7555b21, 0xa5e41065eb308cf7, 0x42c23264848a1ab5, 0x8d65fb15a381ab7a, 0x9cf27bf14e26d45e, 0x3cf30a0806c644c5, 0xca00c8d2a1dc1fd6, 0x898a3e1984bbf4da, 0xa42afea1b506786d, 0xeaf6a7e09d82475a, 0x915eaacddbd76d4d, 0x8e11a7789256acac, 0x04c004bd972e86cc, 0x5a856380c448fec8, 0xa576a4c9e71d455a, 0xaee4fb5b80659a3f, 0x2ad411867ddf14f7, 0x3d2d94f8e68e943c, 0xadfba6c45e4746eb, 0x7c9af4ee038c7a87, 0xd88a8f03b653b06d, 0x9ffeddcf1bdfe06d, 0x3ae34dde1dd3e87a, 0x663f3cc2ea2cb97f, 0x76653d886caabbef, 0x38bb275d7c989135, 0xbc478e3a0c8cf1ad, 0x8e63482efde8c8f9, 0x307bb234595187fb, 0xa5c142422f3716c9, 0x6656dd2328d14134, 0xa73a4e4eb53c2ca3, 0xf85ec4e930423b14, 0xbff55700a939312a, 0xe0ff46afd1c5f5f9, 0x891bf5716a98ef0c, 0xed2b64096ee6911a, 0x2b049cc9d0369305, 0x802bee5e20d9f19a, 0x7ffbe092677a8b33, 0x277258e5f828f3a6, 0xe7c95e60a7bc2634, 0x1e75c7329ed7c7b5, 0x366514c0063686a6, 0xf812f4bca224586a, 0x2467ed6fec20c5c2, 0x92fd08e70055028c, 0xeff52737b5c02afe, 0x7005d617db7ec609, 0x438bf0f6b733328a, 0x782b1e323849f881, 0x731b3fafefcce402, 0x3e7968d25f72c565, 0x68ab0c5dfd3133dc, 0xb33c19dbda6319d0, 0x5739691dfa359358, 0xcbea2c6b66bef5aa, 0xa89d24321b6d3dbd, 0x367049e3e11c5d30, 0xcc94d2e32e6442da, 0xde8ff5fcee93c1d8, 0x65f61b1aaac3d431, 0xcf5890315936dffa, 0x187589a9307acf47, 0x1ad9799d739cf1b6, 0x3b32390d2583b8f7, 0xe921a6afec36dc5e, 0x89dcfead1723e8b3, 0xc970c7718782b224, 0x26e791dcfb229693, 0x606ae060f76bdc1c, 0xff0f9245634fc5f9, 0xf858458577803999, 0x07e6f717da4c7cf0, 0x086426a22e2cb8f4, 0x1361157cadb51496, 0xec4061dd38d1f175, 0xefa66aa210164389, 0xa115b36db2858de1, 0x67de54f0830ca044, 0x2ef05f6b9e5cd05e, 0x9735ca3d87b05a7f,
    0x61e696df589d4132, 0xdcf1af7dea6b6c5c, 0x9e76ee729722f47b, 0x6bd96ba8d2c4b56b, 0xbffcbfc28eced5bb, 0x6b8db37c3911497d, 0x6e90a747bdb96b4b, 0x5788daf22c2354bb, 0x9d385536d6d88083, 0x71a1c63a61180c4b, 0xa86311814d2f777a, 0x57d98722f2abe7db, 0x10b2d5707baace1c, 0x78a9289f3cef8e8d, 0x79754cbe8a2d9852, 0x2162a89f343b77a8, 0xf4cb07ac027dd7ca, 0x64473567ac86db39, 0x42998989e2b9f455, 0xcb760379d3bb62c3, 0xa15c7a5dd60ce398, 0xab1a02bce5c063d0, 0x510eb1877180d134, 0x1797c406f6173a61, 0x4ed72612d57ccb2c, 0x899db128f90d4a09, 0x7052e4207feb4b9f, 0x49ebcc0f6e63acfa, 0xa043d2a329e9d767, 0x3ca80c3cf0051c92, 0x2904128cefbd7817, 0xb505ddc9e3ccf8f1, 0xc135be67ec2944b4, 0x9dbb032f6b3fddce, 0x3c0a11dac1931c66, 0x29f6e5282f9a22bf, 0x635f373c2d090bf9, 0xd544c709f60ef2cc, 0x717edbe2de814b81, 0x0e35203ac05dab9c, 0x511a53983b5a5b56, 0x95d1c75a4d25bbc9, 0x5b944a1c38c5bc08, 0xaffed81f6bfdc41b, 0xce3fc6687b42b7da, 0x3851f4bc60ca110e, 0xba4c69ae615b2afa, 0x7806164394833570, 0x7ad5da4a9545b7e4, 0x5b22025a50e3e137, 0xaadc483cb09603f6, 0x83b7c88eaadbed1e, 0xf494db406b994bda, 0x0885cdfc7a8c4bde, 0x3da0b73adeff0a31, 0x602d63ad8db48c7b, 0xcd0e83a26909f30c, 0xf2f382751a2e6538, 0x0dc97757dee3a6e2, 0x516f2c1df41a2528, 0x4e12e40baf21a63c, 0x7de09df5ef03dd6e, 0x0ce3a9f63404879b, 0x2fde8721b3eeb819, 0x951fb41b2f7fdd5a, 0x78f12c1f0fd5df35, 0x2ed87a7779cd3984, 0x461f21ac3037597a, 0x28695e04e6eba3f8, 0x9c9396d4b8a14082, 0xeeacef1cf3b8060b, 0x9a1168882de7ba48, 0x7ddb2ebdc226420e, 0x62bc173ba1e24538, 0xd596f99e285b1f5e, 0x6d04da93db024125, 0xa310af301a2bd97f, 0x8553903f7786d1df, 0xfba329af0551814a, 0xec8a361450732388, 0x7153d7fa742fd838, 0xbb3d46d3a8c32789, 0x770d150f86ebc30c, 0xbfb5457efb92e9a6, 0xadd81f1f8030f455, 0x4120cb09c4ed7f7b, 0x3d68d228392214c1, 0x18c1522916b7a7de, 0x32a0e3ce61a480c5, 0x90ba5944b2113930, 0x7c316d8b37c43523, 0x8548dbeba6021b7d, 0xada6b223870ed200, 0x7f7b1fb82e93155f, 0xaccf396e509f0f8a, 0x834befe74ce68071, 0x0fe9ac279a024812, 0x47a61b44e0a22690, 0x07d88f831c86e989, 0x527f1b8a9cf9742b, 0x8ab6381ee96e57a1, 0x94138fa3f30ae0be, 0x8f85759087558c52, 0x3f14f116a0081305, 0xd6dabf449f7e74d5, 0x7b3701f9a48786ad, 0x7da8011701ff81b6, 0x6c6118607ed54462, 0x0d4a3e9a1e4ed4b1, 0x6c4e6c24e5acec25, 0x2c457d670f1f8e3d, 0x8e5e018b86447776, 0x8ed20c56778d8ac4, 0xa949660227e28b7f, 0x53ec6af7de055e1a, 0xe4f5265bcf30419f, 0x4e8cd65a998b96fb, 0x124fdeda3b282dc9, 0x4c225ed15d202748, 0x54f5b57bcd5f7730, 0xd81a0162ad61d60f, 0x587458ee177e0a3d, 0x840c40a41e7dc4fe, 0xc4044d3ae0164be8, 0xf8bd66e7ef5597f1, 0xd4bb9ab1f5537fc5, 0x49c34035c8f18b4d, 0x39c7c7f0b8a2faad, 0x78b84c6e081f52f2, 0xd1751ca76f349bb9, 0xf362756c4993f905, 0x36d78c9ead3a48f1, 0x7af41da88039a579, 0x34604d3b65fb0fb9, 0x504e6352cb618ad6, 0xcfa58ee9c3e3b92e, 0x5d0e2ba2fc6d2dec, 0x1b570dee9b65bbc8, 0xec1a3b1050d037da, 0xed45831ba379a493, 0x62b518ab03911ea8, 0xdb0ee2ac0ca14d10, 0xeae48e39f84d0184, 0x8d6cfca9932736c0, 0x575870a5c239e07e, 0x42fe482de0eceaf9, 0x7e4496efed09e1ea, 0xa0bd2439576a45a8, 0x74608f8812fcd9cc, 0x6200b8a929e632a9, 0xb7fd58da61825acb, 0x7329f17095976dbe, 0x289c3c6bdf40d60f, 0x8ac52d583d6124ad, 0x00afb063dde664ca, 0xdf704eec8a2b60d3, 0x3796ceecbba0a4e4, 0x3204c1294ba67f5e, 0xa35e660e533c72b9, 0xd234691884fb3bb3, 0x0d3dd51746f15a19, 0x6ea37696265cc53b, 0x2a83cdf5d9455f0d, 0x5b27681ac0f42249, 0x7f24738ee155299f, 0x6a22436c25c26ef4, 0x8429d12a87b26990, 0xcd70254a1b8fcf91, 0x346d78a9fef9eaf1, 0x540e01fed1c89cf4, 0x1cce772f91dcc507, 0x1e76c4101439c916, 0xddfa70bcfe2c5735, 0xb9d9a0a53093bea0, 0x890880517c5af427, 0x957ac8e2639080ef, 0x3469442ba6e31541, 0xa1df648f14eda5c1, 0xeca2448f9128ca01, 0xada41f959f33940b, 0xa6dab10060cdffce, 0x0486d9b1d2ac9fb1, 0x89d78a0e64383baa, 0xeb94833ccaf98b6e, 0x979d11adfe02c0ce, 0x1faf72fee1b1b2b2, 0x1b5762c51861af74, 0x34cfcad5c04da232, 0x12627158758b7439, 0x712749695c39492a, 0x2819dd91d544c6a1, 0x201d279395a154b5, 0x346f5bbe0fcca3f1, 0x538f75631da12b49, 0xd967562145432041, 0x86a31aa04041d2c5, 0xbb004b9c51838e8d, 0x1f12ee86cd853e99, 0xec3610fa49c7fd36, 0x1d438cdfefa2b7bb, 0xc50debc50cdeb6d7, 0xb5fabbebf1e6467e, 0x7a9df01c5ab9254c, 0x68e059a1bcfc8451, 0xdd45f94eeeae993a, 0x519297a6920498a0, 0x0f460736622448da, 0x0a3682a89880c503, 0x52ac9c01383a1974, 0x3bab6639825721b0, 0x76fe536ac7c8175e, 0x60cd9a6b161a5511, 0x5c8343e1060fb950, 0x2d43d2618abdcd9c, 0x29980a58378f1e16, 0xce58134eb174bd2d, 0x6a711d9db71cfcb4, 0x0ff552b50c98a874, 0x2b69d5d0348307f7, 0xf48cf7b7bfef30d7, 0x62ec0ebd3da8897d, 0x152c56e53d1d7ee1, 0xa2512ab92ef80aa5, 0x94e37c61862a9aba, 0x17a112f22dbe1a9e, 0x314e97f933e32e53, 0xc64c003f0e15cc66, 0x86bf25a339cbf105, 0xd18d7ffa47c00fe2, 0xb41d90afb38d96e4, 0x37c34b6b3a7f8204, 0xf8638c3eaa944afc, 0x240a1fbc417a457a, 0xf159ef4402855769, 0x13151a43c06c3410, 0xe084495a59b07d01, 0x6296a899b9695af8, 0xfaff9e9a9bfc294c, 0xecb64c1ae9c92c35, 0x167be6ef181c06cf, 0xe8edf84efd4a01d8, 0x2e338952ade1c3c3, 0xeab86c80a2436960, 0xdf2e232a7d37ca2e, 0x6cf73a3eb0f00e82, 0x4b73e59863a4d85e, 0x5afd64bbd4fd7bff, 0xf91d137c027819dd, 0x8654658aa409ea8a, 0x78f1ec3d06f2321c, 0xe0bbf53bf57aef15, 0x2dbb2e4e1413e366, 0x84b6b678291909ba, 0x006e552315153df3, 0x0ab6f61aa810f6cd, 0xe28bb9e6d7b46230, 0xecd7f7fc026f1d89, 0xafe508177fc3c781, 0xe73f6f22b1a6e616, 0xdf7a0dd294166c36, 0x44db41b9894c7459, 0xa726ba50ef7ad6e1, 0x337c98b7b5a6a0cd, 0x973938c96bb85f4f, 0x8a011d0a3dd43dad, 0xd38c5fb95132da3c, 0x0dc6ebabea5f6266, 0x587ad8fce8d075ca, 0x89d995bae524ee71, 0x1781e0b4d79e1477, 0xada24097f254536d, 0x223ed79a1f6597f7, 0x54b3bd09339fc930, 0x11b6050cf92274eb, 0xd166fcd58225971b, 0x4125b945a7ea7d46, 0x71e207fd846bc8a2, 0x56e97f6176c824d7, 0x7880cda749c46d87, 0xb23c123a0d12bf53, 0xcfd437e67b223e69, 0x94bee580e929a2a0, 0x8c627595c7a643c0, 0x96c50db7186dfd47, 0x15823924e7a71593, 0x10bc0a3de6504100, 0x5080cf3573db2ddb, 0x1b2b19155dfad02a, 0x05b4d36fc77b6670, 0x3de9cff23036b3ba, 0xe2c7e2c8edd99ba8, 0xcffcee58d7c35b46, 0xe7c96b6fa4557f84, 0x6f31b9857f0b2059, 0x2ffcc8bef43e263f, 0x9bca5d92085cf19b, 0x4423dd74fcc899a6, 0x58dabb5caf8e94f4, 0xb592952fa95f9899, 0xe5011e4613d44733, 0x81bf6fcac7fe4755, 0x6392583f5f690787, 0xe596a5429deb6461, 0xf3639522472caa5e, 0x5c2f07a16682df83, 0x3efcae85a8fa12fe, 0x839bcf5117451beb, 0x7700d834f448f1d8, 0xb62f8da89ed6f83b, 0x010578ca5fa768c1, 0xed1b956460eccac8, 0x18d3966b793b38f0, 0x5ccafa6b2e0724e2, 0xfeaa99c520f38c31, 0x7836a402c77ade52, 0x1c11bb663876405e, 0xea81f1d63266092a, 0x57ae7f4574c3fe01, 0xbae201ca179c11a9, 0x83fae373b8382835, 0xac0d4a66d94a1c43, 0x59de877117d2f3ad, 0x85f1a555fd2e9be9, 0x76c9a33accf67d52, 0x7cd654451548830d, 0x38810f0341feba47, 0x91e702b9392233ed, 0xc71781a8369fcc10, 0xcef5321cf6e4bbb0, 0x8e37aa3dd3d447f4, 0xa34979372c45a9d0, 0x8580fb06df24f281, 0xc5958a227bc6e579, 0xe17b157b62ec470a, 0x4b911ccd80777961, 0x2f5f33084c768c89, 0x4f881d29b6f53cac, 0x46d2e6a84f329f5d, 0x27e38cb603a63619, 0x9be9bb4065c358a5, 0xe76f6ca549810ec7, 0x0f444bd82728a321, 0xddaa4a583e21e017, 0x6a53a5c0c4e703c2, 0xfc09bd3f16197d19, 0xadf61098d7a8318d, 0x79635854b8efd363, 0x0a62dd670244b043, 0xe81f0f86190d5629, 0xfe6be49bcc3b972a, 0x0eaad9c9bcef34db, 0xb516b84112f02206, 0x072db2bcb6cf45af, 0x42e0ece679f48913, 0xe2d65c7591dc76aa, 0xf836c9a77227214b, 0xa4c2e0d19a0377f0, 0x91570946bc8c640d, 0x70f88d7916bc9aa3, 0x9de9e11cf4fdc20f, 0x182afa69c1e74a36, 0xd35b201a56e80b31, 0x1bb00156921d7665, 0x8c0df15c9e3abdbf, 0xb021fbb0d3ed8e6f, 0x26ec54989b61b749, 0x939ba5161a130ba1, 0x3090102080816e3a, 0xe74327b231926ddd, 0xe7b9849c13bde126, 0x672b6e13d805682f, 0xbd9feb78493f1c1d, 0x773de324e3e96e4c, 0x9c112b9e9e008212, 0x78b1debb5fcfdd29, 0xf465bdb1999660ee, 0x2de1d96310e686eb, 0x1aa8b6bbc333709a, 0xea208cd26cd03d97, 0x2b9badfc77a2ef3e, 0xf1383a1b7aa16987, 0xa94a980b59e5d303, 0xb8fd54e4873edd55, 0x3dd68eae2536b640, 0xc43b87142194c6da, 0x73d893b3a9959481, 0x2ed5b67226acec0b, 0x3fcb00eceec77c35, 0x569013dbfd00b3ed, 0x62536c4076ee4ba4, 0x89e88f2e826bd803, 0x314af333ea87ea69, 0x0b316a7344702831, 0x695704710b6b71e0, 0xfd00075dea993507, 0x90b9cd667a971f78, 0x0449111d9fdda38c, 0x49934b13b02e556a, 0xa6e96b8f19d06935, 0xdbf0b70812ca1c42, 0xf33f38924bcc089b, 0x9d94d1f0cc446058, 0x8d5651a23165f389, 0xfd0aba4dba28494b, 0xbd57bf42ab7f5c90, 0xb4a192e11adf48fd, 0xae8373ad244d6b5d, 0xe25acaf16e81c47a, 0xbd7e1288e3750455, 0xf1492dc47f449eea, 0xcc3a76a1918dc5a0, 0xb101e6960ea6cef2, 0x8ce1067527f57991, 0x3c927544e7d9fed5, 0x5f3cd04424575721, 0xb6b5764caff53a1e, 0xcf7c23407824feb1, 0xded7fee75d6d2a01, 0x70b0c7dd75292dbb, 0x689de8cfc7c05662, 0xb68d1648b5c81a51, 0x1b5347537cfeea47, 0x4054335ef53897d8, 0xf20fe5d2843b1112, 0xf04d53b07d667b49, 0xfd7d4fd55e125637, 0xbd2afed785557574, 0xe3ef37730a583d10, 0x9582f21a31166215, 0x3e6c465537f58dbc, 0x5f4cdb47b8e3e224, 0x8cded19ba950458f, 0x7272e9e80d4e5fc7, 0xf96efb070e34ee1b, 0xee8720689405b93f, 0xe62a09f15201aff3, 0x89754360d7def01d, 0x3645e5c6f6a0e375, 0x51a659fd304f429c, 0x25b08a1b3de2b0b0, 0x508388c15028def9, 0x081e4f319f7f8184, 0x271fda0e108639a7, 0xdac95b89b78e9e2f, 0xb30815a782aa2fb1, 0x1b8167d80422a259, 0x0c52d6e1377853e2, 0xd093cc616e9448aa, 0x4f69ad9659dbbdee, 0xfc93101054117a93, 0x1ac4a9716392eb16, 0x4d4ecf1c2bbdab4f, 0x62f5c859121c7a32, 0xf62609c576af2f51,
    0x2e3deba26b453331, 0xe02e89ecc14f549f, 0x4520a022e36ef9af, 0xbe525c142980dd02, 0xc9fe50e993e39279, 0x2c747abb5caa5f99, 0x38d71501ec85bf39, 0x2de8dd5e54208655, 0xf6931003771ead33, 0x0967cb462e03a177, 0xc541ff5899076bed, 0x4637041adba24899, 0x963f945b6434f665, 0x4ee761a1caddb844, 0xf407e600073add45, 0x2a31e212af1721e6, 0xd8eb2e30475232e2, 0xe9111a70ddcd12cc, 0x9ca6a443153a4176, 0x4fc13c4fe25641b6, 0x31afb10db3329adb, 0x2f173370700526de, 0x9c3feb77f703fa5e, 0xbd5fb0099f340124, 0x6ced4310af146ce2, 0xe291cfe724475fdc, 0x07e144fb6a2452f3, 0xeb4afa6992efe522, 0xc4b92c48a2accca7, 0xb806813a8fc239b2, 0x36b4cc0ca81332b5, 0xedef99bd2c0625f7, 0x179f9c81f6619639, 0x8919ec6a1f686c6c, 0x5de6d05418914c90, 0xa504991e769cc392, 0x7dc1e1538570e16d, 0x7160948aa4e55a23, 0xce05ba4e0bbaca1d, 0x367e76a43e2636d1, 0x1dd5ed1afd68a211, 0x6df523203166f085, 0x6963f89b4f51743a, 0x12dd5e89ad68e0a2, 0xd12bf3721656819a, 0xc46f74c9dffb3957, 0xe2f171bb27761e4a, 0x4def015ac05acec7, 0xc9fc1e114c76926e, 0xa5e4f3b9479b22ae, 0xfa13487d237bd6cc, 0xcc3c7015923c5d0d, 0xb2ec0a948d9e2501, 0xadb913dacc287285, 0x87463943cce5df2f, 0x187437c96209f68d, 0x280631e968eca066, 0xb21921b972106e8f, 0xe0da866004a8ced1, 0x0a6fd89698445d0e, 0x772e8d6796b3bdb5, 0x7330ba1654a79168, 0xca89c4125bee6cd8, 0x88b50595503117dd, 0x6550c44cb063928c, 0x1d5d32a19ac34a9d, 0x1a8b8cf4c17820e4, 0x73a107286528f5f0, 0x84469e611bab3ab8, 0x2f7fba627a092baf, 0x652551ebdc376a42, 0x067a745fcd8a837a, 0x849511e9d1b786c9, 0xbdeadfc49998c8f5, 0x29225bae1b089376, 0x4c1ea909c2b53bed, 0xb152e247df3c8252, 0xc6cf1a094ac2063c, 0x44a3913666d048f5, 0xce9ab65837b0e882, 0x53295494fa754532, 0x9bd570beec0f300c, 0x17541e29dff7ce78, 0x9230ea73d8ad455a, 0x7e813fa3695a64e3, 0x92de52def8551bdc, 0xab5fe8e5d96017c9, 0x23b58170a73f8082, 0xdd4811bae1d4eaca, 0x0ceb5f147c0e62c0, 0xc53c7572048ec0c5, 0x73732100e27433ca, 0xbc299962820a5a49, 0x99d0e52bd333b7ef, 0x9bb1ea688acb36f1, 0x508d294281ff8459, 0x34951e63165d1800, 0x7f90493c1a7b9dc4, 0x7523d0cd9d349bfc, 0x9c635196d4b85902, 0xc96ecfcd2f3fea3b, 0xe435afdc3971b276, 0x7814b45a31272401, 0xba2a14263209c180, 0x46c7d41b2f05c5bd, 0x30aeb86a54cef72d, 0x62a3ec030beaa40d, 0x771d6fd5b0be07c8, 0xf011d529ac2a7f81, 0x4ef9912e34260050, 0xdedcf743148c9070, 0x5eeae2d02bc21da5, 0xa1b77b5df28c4fce, 0x72fb2f506305caf4, 0x2efef37c6917eb25, 0xc31b5b8a386b03ed, 0x19ceb19fb344b952, 0xe49e2e449b966307, 0x6132f3c18185a7dd, 0x4664f1dda3e19fea, 0x5787b8c4ac901f78, 0x00250f447888c8c8, 0xe5f30c0294b1d019, 0x528167ef6f370efc, 0xdb76999d6e088de8, 0xea6759ced15eb34c, 0xad6e0b0b20ff0598, 0x055ef3a848a97182, 0xafaa9f2e72b1a303, 0x0de1c10b5d44ec71, 0xbafbfc233c9bda06, 0x2f59629c5002f96f, 0x154e6544f00b8178, 0xdd62a68d66b6b807, 0xd76618dcc8cb93b3, 0xfc2c1d590de33ec0, 0xd75c6be9146e3186, 0xe64d48fa8950746e, 0xeabb06157b647195, 0xdfe9aaa532981215, 0x288bca9731a35148, 0xecb474bcbc477e8e, 0x79c465a705757254, 0xb66226cb75d275f0, 0x4869b0f3815d878b, 0x55da9b57855ba168, 0xba2c0237f5a4df1b, 0xac165d4139dc4dd4, 0xc125226f643d4a31, 0xd997bdb972e7d552, 0x56f114ca28e2d12e, 0xbe717ae5fb470157, 0xee647320b18c303c, 0x1e388a0aae914005, 0x084b9cbaddf1f877, 0x0bc1062275647e26, 0x8bdee009dcf52b3d, 0x8e86db06bb84eaab, 0x9ea80040409abc91, 0xeffdc2970afde73f, 0x68500a4f69a01217, 0x9918431c5f2ea934, 0x4c6f216925adbeb3, 0xd10ed5d36d9edca3, 0x8072e118001ba463, 0xddbb22c6a02f0e04, 0x7fbe271403d3656d, 0x05bba0bbf7f986bc, 0x436d77886d0a78ff, 0xcd247773fabfb4de, 0xbcfa19c7b49f7ab7, 0x1a07f1d1597fe67d, 0xf2ea86bdad669804, 0xcfa9a011fff22072, 0x901dd452d965e944, 0x388cf0c1acab578c, 0x806918fafe6ea138, 0xe32982cb45d48945, 0x413f4b69ccaf0f4e, 0xc1829093881017a8, 0x124fe6bb1b282f35, 0xee32be42427dcb91, 0xb48969794561e391, 0x4add13ac3c78cb2d, 0xfe11a9dd5f74d65d, 0xbd6a9cc78bb53043, 0x25def3c04fa89b8f, 0x62d9e704b5beeb34, 0xa19e7110c509159e, 0xfc4c27b6b585ac07, 0x579b77f2517133ba, 0x48151a4eb4926821, 0x0be60aed151982b3, 0x0ee296264e40361d, 0x3f6b49a6ee473cc7, 0x30ac2e48c8da6ebb, 0x21cd7396cf18ab7f};

void print_hex(void* source, uint32 num_bytes) {
  // TEMP
  uchar* pointer = (uchar*)source;
  for(uint32 i = 0; i < num_bytes; i++) {
    std::cout << std::setfill('0') << std::setw(2) << std::hex << (uint32)(pointer[num_bytes - i - 1]);
  }
  std::cout << std::dec << std::endl;
}

std::string to_string_hex(void* source, uint32 num_bytes) {
  uchar* pointer = (uchar*)source;
  std::ostringstream string_stream;
  for(uint32 i = 0; i < num_bytes; i++) {
    string_stream << std::setfill('0') << std::setw(2) << std::hex << (uint32)(pointer[num_bytes - i - 1]);
  }
  std::string ret_string = string_stream.str();
  return ret_string;
}

std::string to_string_binary(void* source, uint32 num_bytes) {
  uchar* pointer = (uchar*)source;
  std::ostringstream string_stream;
  for(uint32 i = 0; i < num_bytes; i++) {
    for(uint32 j = 0; j < 8; j++) {
      string_stream << (((uint32)(pointer[num_bytes - i - 1]) >> (7 - j)) & 0x1);
    }
  }
  std::string ret_string = string_stream.str();
  return ret_string;
}

void pf_64_add(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - ADD] Input value not in field!" << std::endl;
  }
  doubleword r = (doubleword)(*a) + *b;
  if(r >= prime) r -= prime;
  *c = (word)r;
}

// Probably not needed
void pf_64_sub(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - SUB] Input value not in field!" << std::endl;
  }
  doubleword r = (*a > *b) ? (*a - *b) : (*a + prime - *b);
  if(r >= prime) r -= prime; // Needed for the unlikely case where *a == *b
  *c = (word)r;
}

void pf_64_mul(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - MUL] Input value not in field!" << std::endl;
  }
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));

  // Solinas indices:
  // s0: 00 01 02 03 04 05 06 07
  // s1: 08 08 09 10 11 12 13 14
  // s2: 15 09 10 11 12 13 14 15
  // s3: 00 15 00 00 00 00 00 00

  word temp_var;
  doubleword x_tmp;
  x_tmp = r & 0xFFFFFFFFFFFFFFFF;
  x_tmp = x_tmp + (((r >> 64) & 0xFF) | (((r >> 64) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) | (((r >> 72) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) << 8);
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  *c = (word)x_tmp;

  /*
  // Crandall reduction (requires prime = 0xFFFFFFFFFFFFFFC5)
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));
  word c_small = 59;
  doubleword q_i = r >> 64;
  r = r & 0xFFFFFFFFFFFFFFFF;
  doubleword t;

  // WHILE 1.1
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);
  q_i = t >> 64;

  // WHILE 1.2
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);

  // WHILE 2.1
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  // WHILE 2.2
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  *c = r;
  */
}

void pf_64_cube(word* c, word* a) {
  word t1 = 0;
  word t2 = 0;
  pf_64_mul(&t1, a, a);
  pf_64_mul(&t2, &t1, a);
  *c = t2;
}

void mds_vec_mul(word* vec_c, word* vec_a) {
  word tmp[t];
  word tmp_word = 0;
  memcpy(tmp, vec_a, t * sizeof(word));
  memset(vec_c, 0x0, t * sizeof(word));
  for(uint32 i = 0; i < t; i++) {
    for(uint32 j = 0; j < t; j++) {
      //std::cout << "a: " << to_string_hex(&(mds_matrix[i][j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      //std::cout << "b: " << to_string_hex(&(tmp[j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_mul(&tmp_word, &(mds_matrix[i][j]), &(tmp[j]));
      //std::cout << "a * b = c: " << to_string_hex(&tmp_word, ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_add(&(vec_c[i]), &(vec_c[i]), &tmp_word);
    }
  }
}

void hadesmimc(uchar* in, uchar* out) {
  // Create permutation by fixing master key to 0
  // Does R_f rounds with full S-box layers, R_P rounds with partial S-box layers, and R_f rounds full S-box layers

  uint32 R_f = 3; // R_F = 2 * R_f
  uint32 R_P = 40;

  // Values to work with
  word value_branch[t];
  
  // Assign values (Remark: This assumes that all input values are in GF(p), which is true with a very high probability for random 64-bit input values and p = 0xfffffffffffffeff.)
  memcpy(value_branch, in, t * sizeof(word));

  uint32 constant_index = 0;

  // First rounds with full S-box layer
  for(uint32 k = 0; k < R_f; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Middle rounds with partial S-box layer
  for(uint32 k = 0; k < R_P; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    }
    // Cubing for first branch
    pf_64_cube(&(value_branch[0]), &(value_branch[0]));
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last R_f - 1 rounds with full S-box layer
  for(uint32 k = 0; k < R_f - 1; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last round (without linear layer)
  for(uint32 i = 0; i < t; i++) {
    // Round constant, Cubing
    pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    pf_64_cube(&(value_branch[i]), &(value_branch[i]));
  }

  // Write to out
  memcpy(out, value_branch, t * sizeof(word));
}

int sponge_hash(uchar* message, uchar* hash, uint32 message_size) {
  // Assumes message_size mod 128 = 0
  uint32 num_absorption_calls = message_size / 128;
  uint32 num_r_words = 16; // 16 = (128 * 8) / 64

  std::cout << "Number of absorption calls: " << num_absorption_calls << std::endl;

  uint32 permutation_size = 192;
  uchar state[permutation_size];
  memset(state, 0x0, permutation_size);

  // Do the permutation with the initial state of all zeros
  hadesmimc(state, state);

  // Absorbing
  word* temp;
  for(uint32 i = 0; i < num_absorption_calls; i++) {
    // Add part of the input to the LS r bits of the state (don't touch the MS c bits)
    for(uint32 j = 0; j < num_r_words; j++) {
      temp = (word*)(&(message[i * 128 + j * 8]));
      pf_64_add((word*)(&(state[j * 8])), temp, (word*)(&(state[j * 8])));
    }
    // Permutation
    hadesmimc(state, state);
  }

  // Take LS 32 bytes of the final output (this can also be parameterized including a squeezing phase)
  uint32 hash_size = 32;
  memcpy(hash, state, hash_size);
}

int main(int argc, char** argv) {

  std::cout << "Starting..." << std::endl;

  // Print MDS matrix
  #ifdef VERBOSE
  std::cout << "MDS matrix:" << std::endl;
  for(uint32 i = 0; i < t; i++) {
    for(uint32 j = 0; j < t; j++) {
      std::cout << "0x" << to_string_hex(&(mds_matrix[i][j]), ceil(((float)n / WORDSIZE) * 8)) << "   ";
    }
    std::cout << std::endl;
  }
  #endif

  // We want a security level of 256 bits, so c = 512, hence r = 1536 - 512 = 1024 (so we can process 1024 bits = 128 bytes of the input wich each call to the permutation)
  // Initialize a (c*128)-byte input message to be hashed and an empty buffer for the hash (ignore padding and assume message_size mod 128 = 0)
  uint32 message_size = 3*128;
  uchar message[message_size];
  //RAND_bytes(message, message_size);
  memset(message, 0x42, message_size); // Each element should be an element of the prime field
  //for(uint32 i = 0; i < 16*3; i++) {
  //  memset(message + i * 8, i, sizeof(word));
  //}
  uint32 hash_size = 32;
  uchar hash[hash_size];
  memset(hash, 0x0, hash_size);
  std::cout << "Message: " << to_string_hex(message, message_size) << std::endl;

  // Call the hash function
  sponge_hash(message, hash, message_size);

  // Print the result
  std::cout << "Hash: " << to_string_hex(hash, hash_size) << std::endl;

  return 0;
}
