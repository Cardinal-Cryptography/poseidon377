// Compile with: g++ -std=c++0x -g -O2 -march=native -mtune=native hash_1536_24_x3_pf.cpp -o hash_1536_24_x3_pf -lcrypto -lm

#include <cstring> // memcpy
#include <iostream>
#include <sstream>
#include <iomanip>
#include <openssl/rand.h> // For RAND_bytes(.)

#define WORDSIZE 64

//#define VERBOSE

typedef unsigned int uint32;
typedef unsigned long uint64;
typedef __uint128_t uint128;
typedef unsigned char uchar;
typedef uint64 word;
typedef uint128 doubleword;

// Globals
// Security level M = 256
uint32 n = 64;
uint32 t = 24;
uint32 N = 1536;
word prime = 0xfffffffffffffeff; // Solinas, 2^64 - 2^8 - 1

// MDS Matrix
word mds_matrix[24][24] =
  {{0x0aaaaaaaaaaaaaa0, 0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be},
  {0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550},
  {0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc},
  {0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3},
  {0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500},
  {0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e},
  {0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682},
  {0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8},
  {0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74},
  {0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644},
  {0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b},
  {0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580},
  {0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63},
  {0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440},
  {0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571},
  {0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da},
  {0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7},
  {0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc},
  {0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8},
  {0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b},
  {0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e},
  {0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0},
  {0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3},
  {0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3, 0xdf15f15f15f15e36}};

// Round constants (1488 = (10 + 52) * 24)
word round_constants[1488] = {0x0b70c897a75060a0, 0x9d75f642b36c144e, 0xe39978de2e7170e9, 0xc5d5fc5245570348, 0xdd90de3607474fcf, 0x7c6c29bc8a1e09a8, 0xa8e5c4b838eb03ec, 0x90f9b857a61c7d89, 0xfe6b8af9f4f0a481, 0x42a398a1c8473e97, 0x75fd87661abd4c0f, 0x8969695fce07da12, 0x9ba6c23c867dd750, 0xc68c570f3aea447c, 0x35fb8422f099b714, 0xd07f2095990575db, 0x1aac61f9e2ceb1ef, 0x1010c480b01130b1, 0xecf0fadbed8a0b9c, 0xbb9a183cd53e0c30, 0x59d056e49bc4e333, 0xa61cfa97709d1c9a, 0x7c685111ea29189b, 0x37cb0e9412e7ea85, 0xac0990fc898a18ee, 0xae071430891f7bfd, 0x2a13a7c58f16de5a, 0x1e615f93d382469f, 0x85f6a31425f4c89f, 0xa63e5ffce5b3f101, 0x313b3a83050f4744, 0xead588d01ed8ed46, 0x7b8cf636067c2ce8, 0xcdeda5df7dceeb88, 0x61cea64a8697579e, 0x6ebed6f8c7e30d24, 0x7bb0efe9eccfcbf7, 0xdc20ca750a53f101, 0x8be778237d86fb07, 0xa12bfe3a67e1f18c, 0xbbd99b38af9e56b7, 0xd6d3950ddac11048, 0x5489fa2e1aca5939, 0x50d8e572c2929ee1, 0xaabefd24306e96a6, 0x6aa6044ae1504e0e, 0x7789c5e109b6f175, 0x873ab2bb369690ff, 0xa8e0713a67d64584, 0x2e3185aaa98f6b6d, 0x59c978c1951218ce, 0x3f7667a2146f515c, 0x89fcceb6e9564785, 0x93e469383bcbcd0c, 0x2ddc82561f0959b3, 0xb74b2d8b514123a6, 0x1df2ae51709a685d, 0x9c3b8590ebc9471e, 0x42f3e794db9c0ca2, 0x8da8fb37453596a5, 0x407a54bc33b7dc30, 0x8925c535ec028057, 0x18f03fc25d83e8eb, 0x2b0c2bd6fb9fd0a6, 0x9cca73ce81b289ed, 0x39c618bd3aaf51ac, 0x6c601761d6d4aec5, 0x33e49c00d4d595dc, 0x1f726c6b3d052c07, 0xe179d4b6c959acd5, 0xab1ec920a68c349f, 0x644dd72723141bb3, 0xc1fe7893f340e30d, 0x8fd3641e22604dcd, 0x90b5be047b7e4f9c, 0x447c6ac43182f69c, 0xb92d1aae01239694, 0x3dead23878e3764d, 0x8b9d100ff2c4384c, 0xbb4ef0c30a7e7c81, 0x3037b128be1e58cf, 0x712c4aa0348c906d, 0xae941fc77371f412, 0x96a7f2cbdcd772aa, 0x30a3c129cb34ab86, 0x959c83f40899955a, 0x973be4cf5724e161, 0x795209e188a1ed20, 0x95e9e9463c116ab2, 0x57bc0dccc7f197d0, 0x5b609a7812f6d47f, 0xecd8150e1f8c6ed0, 0x173962ddf95f92c5, 0x740f6cda40e1c372, 0x87b3f396b789bd31, 0x4eba00f2cf6a0451, 0xbcab1e48e4b60455, 0x8ba716b70ccdea3e, 0xfe1e2c0b303e5e6e, 0x1e59eef660c879ba, 0xcbb44fc64a5bf3bd, 0xcd9dc4885a2a22ec, 0x4b077339b61cb54b, 0xa234d79af5b47785, 0x177ae3445779c42a, 0x2c2efe0f78cc9bab, 0x27b557936e838266, 0x6827078d17db7b0a, 0x617faf41c0f75f5d, 0xc5881aca204f8e44, 0x599e2e360fd1d61d, 0x2bc4f3bc3dedc38d, 0x447b957e7fbf2008, 0x18df334d9aaaa079, 0x6d6b2992c45b0bcc, 0xa8cb8305973bdefd, 0x4ccfca62bf204206, 0x72bd0a25a825035f, 0xc0a1274289a75c5a, 0xef902569010fdd93, 0xf422c14e22ec1571, 0x06bd49fa2e8c6daa, 0x772ecd2b5b048c10, 0xe05c470fda04250c, 0x61884c9154f73bdf, 0x3a7b2ebc673e2b28, 0x9c79d6f6839ebd79, 0xefe33249b856eaf9, 0x56d72cd3c0e6e618, 0x198a0c65c265044c, 0xc55c7b0d68d9b079, 0xf062668468b19754, 0xb51d708bb8d84441, 0x544c24e13271c27c, 0xfafa132e0066865e, 0x480a24ff48f48bc6, 0xc0962b9ba290b33c, 0x941a84f34b13f105, 0x22fa44067f8f0dde, 0x71b2b18f78a859c1, 0x093f28214e172fe7, 0xf1ed7c107a410863, 0x15c309c1399dc776, 0x94054289fbd40af5, 0x4943f61868e898c8, 0x0c8df75db06fbd6b, 0xb82ab7aa2ff1565f, 0x0bfae6f571c379c0, 0x376256a71fddfeba, 0x885fdfdef27b2b13, 0xee7b9a5d10a4979a, 0xc932cfc6c958328b, 0xe13c4ac17cc4a555, 0x6ca536755d857531, 0xa918afa864ea0112, 0x073f1e6a4af9d684, 0xad4913de7c379555, 0x28870cdb4ba35e87, 0x952c0187a54edc6b, 0x1068be10382c2722, 0x2ad3554f4d0d487d, 0xeb0af52f8e483ff9, 0x5ec3e36a009b3edf, 0xe3cb369202de330b, 0xf3a432486da9b8a1, 0xa56efdff56f5808f, 0xaa797816302f2c42, 0x7154ce1345037b3e, 0x1660b8f8413c2fbb, 0xae25537d1e5cb015, 0x3b5f2d46cfe71c3b, 0x03d7bdebdbf170ea, 0xd9a8fa24f5023688, 0x8805f7171acf4fd9, 0x5e0f4b3828a13559, 0x6478de1689aae4d8, 0x79ad612e97f51314, 0xd02c48980ad1f784, 0x6d72cd1114a42f4c, 0x4300a1b888b82c3f, 0x0e255bfdd0c6b241, 0xef7113771ca870dd, 0x2b82841a332d2397, 0xabd6a038b75bee64, 0x4d1f41e42e78a858, 0x0d81a016284cacdb, 0xce7a01734ea5b5c6, 0x1d98f2ff7d6ccae2, 0x584b0ac36b02b4c2, 0x6f768b8bd37fb7b5, 0x9e8d29d6426aa821, 0xa75ab81632036be4, 0xbd0a9a368d418003, 0x04bab71f2aebc7c6, 0x7019ce043d97363d, 0xed91f9e4e5721a27, 0x46e284f723b6c2fd, 0x4a5bb77d3a10cd69, 0x7d37d3a2755af4ec, 0xde8a1a64959f4f77, 0xfcbdc02f3ed36c41, 0x4de6871398be65ce, 0x36b7de0044335345, 0xb2d5173bd2d8afcc, 0x8c5037ea233046ef, 0xafa51b35f1867fdb, 0x237df8e38d0dfe00, 0xa2e0dcc1f1092a0c, 0xf05bc5b1c2dcdd78, 0x7e08034248803ea4, 0x978d13cc21639553, 0xa2ecb1ea9c6b64f0, 0x9fe3716d2326ea01, 0x23fa9b232d4d308c, 0xacbbfa9c3b4111d2, 0x04bf151b5af36753, 0x0ff9837c1dcb4b13, 0xd35ef2c291d0b402, 0x9144c2e8dddd764b, 0x4d56975202c96441, 0x1956cd240f80f33b, 0xafe381c94e750e63, 0xd1521a3fe72968c3, 0x03de1848d2517abe, 0x15c3ef72a65a5b9b, 0x24fde3de4c76fb42, 0xbcb58197f5bb942a, 0x384c1a74d35f8e73, 0xd11bf9a25bcc19b7, 0xf47a8e3f7b05aa89, 0xfe9c7b135db7f856, 0xc0e86517a800dfb9, 0xcc1ef6543d62d217, 0x79634f62f1245798, 0x95adbef967d1949e, 0x63f7840165416d68, 0x28d783c6d0572a73, 0x3d1a4d12b8852a53, 0x99e12111cf400db1, 0xa02765a2ea8e221c, 0x7413779b2b04c52d, 0x1490e816e2287ece, 0x473d449e38fa42eb, 0x335d2aea27d739db, 0x180466365269b0c4, 0x71b1c204c4193e85, 0x942f90ed2c947e2f, 0x3d0148bbbf01af5c, 0x3979ad1663ab1e5a, 0x0b86f7b0956a6cf2, 0xc76ede722ed1670f, 0xe80344ef1c4be541, 0x5e56d100e48c6dfc, 0xc4798955b3dbb5d4, 0xd935f7fbd0297edb, 0xe6b31e49fd0cfe53, 0xf08efd94173daa79, 0xf70bab7241e603ca, 0xe3c0a16ec452a24d, 0xdffa1836325854c0, 0x310d67ce0a612ebb, 0xf01ad50f97a3a584, 0x396465a485129a78, 0xa25cbeb4ac282d6c, 0x0bb54d0abed70f3b, 0x6a0fda8e94ebf0b7, 0x2afaac5b6fd1f746, 0xa103d51d9b15c8ea, 0x76feb86e7f6c1c56, 0x928fc91e98db74a1, 0x8533962fc0bf6eaa, 0x17223987a0ac2a81, 0x9b801ee442476a1e, 0xf4125c962ceb299f, 0xb84e350844f43424, 0x50042c6dca2cf7db, 0xf69186ed28b5cbd9, 0x328ab10b7cfa703c, 0x1bc9162dbb6320b8, 0xb95c248c0c4f9a5b, 0xc9902ba69b5527a2, 0xdd705251bea1c3a4, 0x7cf2f38c1aa345d3, 0x0ced083fd15366e5, 0x622345e4d6a85b45, 0xfac4256722bed98a, 0x7d00bcb15eb8f5c5, 0x4fce91d4e6b9f98e, 0x511e243796d105f7, 0x40e26036c4337277, 0xfbeb404229ef6524, 0xdab7776c839607c2, 0x911e52a81b5760c1, 0xff18eac4dce5c77c, 0x28399cc6490e907e, 0xfc3209ce34807a27, 0x6af536db1f5d0381, 0xbbc7cb9e677b6a15, 0xc7a22eb9581c8e23, 0xe601e7efbb62cabf, 0x514500c50fef1520, 0x1c2487623ea3cb01, 0x72edcdbdbc87f38a, 0x4774fcda86d22fb9, 0xce4fea50f9676bae, 0x4d1168cee484c8ef, 0x47ecf645f1c4a2be, 0x83d3f16e92dd2b4c, 0xf7163f829551814c, 0xbe106a8dbb889f93, 0xc2a4c6d0b31034ff, 0xafcc6cf5b1672203, 0x83f0f8c10a7d7343, 0x76f286fd635548dd, 0xa5592cc095072dd8, 0xc0e1d40d6110511c, 0xd639a6f7b146c736, 0xa56c6f95cd24b432, 0x5a77e6a43a90dcbb, 0x59f9180b7fb88977, 0x680f0733ab130827, 0x821320f362ccb9e2, 0xd27c28bc0d9e7b72, 0x54099a317e0f35f8, 0xf284672ccf52ddbb, 0x2c49f47ca3bac2e3, 0xdf8cfa9247bd423e, 0x02346a36fc983217, 0x1e39bc73949b674a, 0x145083bcfc94726e, 0x30b8d72f7ac14b01, 0x4467edc55b0bf632, 0x74c543c4bf4f5ac7, 0x0cf33498cdf9c848, 0x2fff2e650f0e0676, 0xdb6e1625b7057f20, 0x161979e97da1370e, 0x54f5a98d2e3ffb94, 0xa51688baa865ffb2, 0x88e17f7f9e815086, 0x3efecc42dca94c6c, 0x366bb12e575d3569, 0x796435fdd38078a7, 0x8c7a3ac14add10e0, 0x8f93d5946b3bc817, 0xb6f6cd7ae46d5e6f, 0xe0cbac84c1fdb03c, 0x8fa23712680693e9, 0x3aae5d0659d5f1dc, 0xd11d2095320d359e, 0xaae982555f02cab3, 0xf09b6ab3589b37a8, 0x332beb030b7dc599, 0xcf9faeba7118d9f9, 0x32df9591f6d9cfc5, 0x22f2438a364a5eed, 0x9a7e14afaea0225c, 0x06b7a1126b9e722e, 0x1618c8d2d95efcb5, 0x43d80e0624e7537a, 0xad388f24893bb030, 0x614fbe8f8618d9a4, 0x6fa74ea06b402f5d, 0x036dce11f0ce1389, 0x9ac40552738b0224, 0x19be5660ecff8ee9, 0x3218e8cbc25c2afd, 0x182b57ac194c87b8, 0xec646d76a0786aec, 0x86502fcdecdd9d02, 0x3980aa13ea533aba, 0x6ec40ee7615a374a, 0x8015a7cc24ed75a5, 0x3842ca20ea4d8eb7, 0xa8dc4b8140af5074, 0x6a3625ed019b00d2, 0xb32e76ba559be5c5, 0xc5832f53d41764b0, 0x1a7f0495001f710b, 0xa8ded17e6b3b65a7, 0x6ecdbb0471220ff5, 0x09a01d0b685e8cc8, 0xfbc7551b23fd62a3, 0xf8b397662a5d0e87, 0xb643ea59d2924379, 0xd59fe7677dab04cd, 0xf3fb7fece50027a9, 0xcf2cae5fc9d8d1da, 0xd576e82b7cb72928, 0x2d773458434a5d31, 0xf4a2f1998e432b49, 0x8a7a1aa28ded6630, 0x4524450fefe58e40, 0xa356155fd3161255, 0x37a6b2547dccbfbb, 0xa0e6c7123634640b, 0xefec9d65c50af66e, 0x9cf46a464cd4765f, 0x0b11b2f20a012959, 0x5e64f9e976e7ab46, 0x6c4ee3308e27743e, 0xe4b22aaa5207cb77, 0xb4e4de8e431f2f33, 0x47d57f3467f259ff, 0xb0a1ec6c4f12b0a7, 0x74acfbcc8232c72c, 0x444648b0d5ddbeee, 0x9ff238fd024389aa, 0x5b72c68f75b4e381, 0x23185668d60fdd3c, 0x4686f3d7b0ee65af, 0xc7a5666f0c674b64, 0x1b68fab7a411ad18, 0x8f4a16c394b1e20d, 0xe4b1ca4cbea18745, 0x09398cec4431c2ee, 0x865579a97301e498, 0x879ca413bd06c27a, 0x9a0b428f3f353076, 0x6914c3f13ab2c89c, 0xcc69c1c79afcd1a9, 0xb06c2ec1d4bd8435, 0x89046f2b2bc20144, 0x809e1f5d97062c9b, 0x639e02a73c3111b5, 0x01041f64138e2131, 0xd6b7c24502127cf8, 0xe91a28055044616f, 0xe21ce97b29c528a9, 0xabcd83eb9249a427, 0x46013515f40333ec, 0x210fa800ab33b416, 0x4b7cefe9fa9eea4e, 0xf54404651da69c0f, 0xbe599f397978a45a, 0x1802b95692780b78, 0x24b49021db0f1835, 0xd2eb4178a2c79008, 0xa8ff404fb096a32f, 0x25e58aab15c9e0f2, 0x2bb748baf47c68ee, 0x08c71bc1f52efec4, 0x754a1a96e2e11d50, 0xc59b04f196e7e8c2, 0xc6d508330b9defaa, 0x3ccecc93d1ea67f1, 0xe6f3b1066b84d29d, 0xf8da298887b16236, 0x6c7cbd3f2d5e0280, 0xe54dfbfcfd67a277, 0xb99490e8972172f4, 0xa98f7e960f498157, 0x92a965d33e1efee5,
  0x8f72efaffca76e40, 0x51f058a5776af055, 0x3a5d9ef1c47cc7fc, 0x098e28999d6c572b, 0x2b71367ef8ef868e, 0xdac7bbc3910b7ba1, 0x91bdf72952b8f752, 0xc0f42eccc089fe77, 0xf12ff2f37a6166ac, 0xf5342cc02465a657, 0xcc9858c2f037c40f, 0x280501e0d3ccaa33, 0x9e8a9fe9f491809b, 0x600aca00d62d2b62, 0xb5418e98b01e569c, 0x4ad146335899744b, 0x97fb92624f5ed2a1, 0x91f05ed9824b07e9, 0x5d0a7eafa131ee09, 0x0f6b9c879e13368f, 0x1e731c3ffafbc162, 0x8cc7f6dded478bef, 0xed8fafb354532dc0, 0x87f455c46d57801f, 0x52b9e08f0eb027f3, 0x726775dbfe835c78, 0x10bbea1b540e1a20, 0x7739203c96845d26, 0xdb6123dbe4236de0, 0xfefe774244d51c51, 0x99e725712cf7c3a3, 0x15cf745160b255a7, 0xeed5f89d957d27ee, 0xb9891bf079a6de05, 0xcec095ae4899f7e0, 0xa614271610ca4592, 0x4547b25142b82bc7, 0xbe70dff919b2451e, 0xeef4d6956d3daa7e, 0x031f2d74b73dc883, 0x6b243df2811645c2, 0x80256f44aa69dc0b, 0xe5ed86258122592e, 0xb158184ccccf3fd1, 0x74e71a114b4eb46b, 0x4e475f8015f1e501, 0x586ea3a5e790dcd7, 0x574b9a72d252b335, 0xb39b94e668cbbadf, 0x09034644a456f0b1, 0x2455e57302ea5a44, 0xd118ff0f32da9e89, 0x8d58583f3663bd42, 0x27405d3ecfdd5238, 0x65bceef17039134b, 0x51597be11f37fc34, 0xe3271d277442d395, 0xdf8ae24211a69edb, 0xbd14f41595da8424, 0x51b86ddd976af874, 0x84dc4e0e086c6af5, 0x82cc282246767392, 0x8f78c1819688dbc1, 0xd7b2e61c156d15f2, 0x40990b3e1e9c8c2e, 0x8ad2250af9e85274, 0x912a80815247402d, 0x4aa7df1f17256eee, 0x8f8852b36f597465, 0x9d114498da4e9bbc, 0x349b8e6c540afd0e, 0x17f66ba5dfd566e2, 0x98666e0173d2fdb6, 0x6ac21ce405720342, 0xde9db0db365e2939, 0x6735cac796fb6d17, 0xa8fc0c89870b98bd, 0x631193cddeb57db1, 0x1cd1cea8d9e920b3, 0xd09641b2728ae0d1, 0x9456b34bf6ad2cb7, 0x90e3b6484410af34, 0x0d0185539a498d14, 0xe0321e6b6f5e5ccb, 0xeef854f3bc3b863f, 0x96014c1aa5cbfdfa, 0x2b9c0c2de5bd8a49, 0x9a4039bc0dfd298c, 0xe11d1976c9b2625c, 0xa10389ee2c4b47f3, 0x6c446c7c68522b3f, 0x1eb52eec2cf7d1e3, 0x555623cf17a4f360, 0x341fe22696e64387, 0xa6fdca95d08af564, 0xf9dae5592ff6f072, 0x6729cc75407291e2, 0xb8ad85021aecd121, 0x70208fc278fed46a, 0x06ac4fbe7c55c535, 0x5696e701851c5525, 0x4563b02e07e23bd2, 0xd4aadfdd08b2c0b8, 0x483e7962cecd343a, 0x72d61635f7f97b07, 0xce508995d1de5e1e, 0xa477cf07233ee927, 0xc899c5870f576230, 0xb65ce071cc9756e9, 0x4ace3946af65c4f1, 0x40f5de28557935ab, 0x55d08d64ac21d43c, 0x1c770866d84b6ea9, 0x3471aeed95d39ea7, 0x4393451bdb967ccf, 0xfb5df1c87843305f, 0x6c60f161bfa5c4e0, 0xbca9631c4eaef47d, 0xf13750fb184bcab9, 0x351763dc9fa3a965, 0xb0c50e46352d0952, 0xac3f56bee5cd96e1, 0x24d9abbe11deb188, 0x3d283a3dee1224e8, 0xc4973423a7e46594, 0x199c2564d484a3af, 0x86e97f5dc4239b54, 0xbca4e72fa9c423f7, 0x282e762a16b976fb, 0xb9b4947bcfbde20a, 0xab5b503b76f16648, 0x4066f4f197bae779, 0x3f90e5770155c355, 0x71971c142d3def87, 0x37ab8523b5e55cc6, 0xfc9cdb51f3582969, 0x0697062fcd6a9754, 0xfbf7501a2c589201, 0x33eecda979e205d2, 0xce289dcefbe47cc1, 0x3baa43f6ed2df8af, 0x3e79486d208bcd45, 0x492ade7a26c2337c, 0x2bd201ddecf435bc, 0x85060af98f2325ea, 0x99d4d0baa6f093b7, 0x546d8e2d15f47989, 0xa86848a5d6c24cc7, 0xe116088911a5c23f, 0x30900a33fc787665, 0xc68aeeb2cb8e5846, 0x516bc2d03e043e01, 0xe9d57e1534ab59d6, 0x45375648df4dbdd9, 0xb3f84c7cf716450c, 0xdcf27646ab5b6c45, 0x2b1c01f2fed84b3d, 0xa02031aff61cd457, 0xbb885604dd20e301, 0xb398cc73b4ad7586, 0x51ade9987cce8b3b, 0x285de490efbee84f, 0x7fdc556a7df0cdaf, 0x14c049af05b2fd1d, 0x939b600587b36c70, 0x0321f4cdb8048e5f, 0x0529ccfb336a8437, 0x4e8da58966cd716e, 0x5bf04f2577ed3f74, 0xcff6c59064c6127d, 0xecb7ce0d89359345, 0x68a2da46409686ea, 0x08f737d8ebcbd8c5, 0xb77d21fc8283febe, 0xe5978881765944b7, 0xf7591339629838c2, 0xd042ded1b1855148, 0x2457e7b1d4b8e712, 0x3df650efe03fa50a, 0x226876831e0f2078, 0x7486780d88882646, 0xdf87c65ad1fee225, 0x1f9644856eeea46f, 0x3e7438fd2a754a0d, 0x6028e1852c30c470, 0xfe0ae1c630d1a705, 0xacce6c27c2ff4dd6, 0x93cb97431dc4ca58, 0x49cb82d875ce7e34, 0x723d41120b914a63, 0x65fba13633711731, 0x9d69d5bc574b3546, 0xf1608f3d3aef81c4, 0x9d9e5f58bc607003, 0x13c1d903b29042ff, 0x211b664e9a38e27f, 0x46488a763cc7a698, 0x06e0b9b457e650cc, 0x7eca00a4232b30c6, 0xb5b29b2e71d4110f, 0x6bcd9e2815ccab95, 0x2cb388d607776b85, 0xec7f230faa5e03d4, 0x053a595f28a81735, 0x3be85c48ac6af39e, 0x7c3672d1873458ca, 0x596c361e695f00bc, 0xf79663bb46dccf3b, 0x402e9cb4f3018f42, 0x551ba15ca14dee3b, 0xce9d76158995f276, 0x98b8a51e55818e0f, 0x6ee1cbeef2a58282, 0x6ac5b3f488b44816, 0x0946505740efb69d, 0xb6c94d79ae536393, 0xc190d03204e0c0dc, 0x0c6c4d328529fb37, 0x39d50bc28b44d22a, 0x93d9ef9ee8f3fcf8, 0xe385b3739889d07b, 0x0a1b9b6ba8a7fb70, 0x6a882086274c34a5, 0x5daf617549c384aa, 0x17df7622ac58da3e, 0xe50da4d8fe74f87d, 0xff30466e8c315374, 0x8dcff365816d350a, 0x5aa1eafa9c520e31, 0xb9e24aed8bde928f, 0xc29c6a31f9bff32a, 0x1636eca07c4f8cc7, 0xdd5b31bb556786c7, 0x418527847c54d0b3, 0x735f37958135f324, 0x4f06f983ce980e19, 0xb2ac1bb133b7e888, 0xb209fff64af736fd, 0xd969669324ec346c, 0x8245c802bb347c29, 0xce84ed631cc2de74, 0x0a7dad5f37aeb67d, 0xc13e0729b2698fa4, 0xccea5909572bbe2c, 0xcb1b7bed405cf432, 0x65025ffdf9b4b5e4, 0x8fc340068f08564f, 0xadfbc713197ae692, 0x0925b25a18f30d80, 0xda22304d6483b517, 0xa284459f7236e421, 0xf33019f4efe2c0f3, 0xbbe39b68377493f7, 0x857ac3c8fb60dcad, 0xc52cee28af9d3f5f, 0x2c74cb1ce268c033, 0x31171b7e9966301d, 0x18d0fa54f8fb5745, 0x7d1bfa6c7c687522, 0x1d10230a64651e63, 0xf5800a3c86345827, 0xecc47472dfe4edd3, 0x2afe94c5e8401968, 0x62be0bc9f2106547, 0xf1aeb6fbddbc83ae, 0x1927f030a530aef3, 0x7bb78bbf7c332acf, 0xba6f16b2a298cc69, 0x57ce765e3063dec9, 0x9080bea0dde7cb29, 0x7b93ffab901a8b4b, 0x30f4fd3af88af5d9, 0x59b38f55032e449e, 0x8479d1fecf78a88b, 0x03a3a44d54560a45, 0x571515e8097e969c, 0xfb2f981d44e01149, 0x259a31394954f257, 0x810463cd8a8e58f6, 0x6a811029745bf509, 0x40202ad9d53fedd6, 0xe538226e87690827, 0xce8d8ef713ffd08d, 0xcf28eb3bfc6d8a35, 0x379f54a065b977b4, 0x32032842e6a0c2ee, 0xe48a8d2d93e3c30b, 0x1027a9590d29cb75, 0x9c3b8e9f74a82109, 0x5e4334c385905947, 0x044424cb103fd324, 0x4261b50e329c89bc, 0xa59ca6a1fc8f2dc1, 0xb1dddae28e8d8da6, 0x5e4912b07f586f80, 0xf9547647426a22c6, 0xe93a9e2d3dea6c1e, 0xa9ed8a201ff88349, 0x685dbd07306c00bd, 0x4265e93e624d0c8e, 0x0033d903d28236b6, 0x57c229dab5b6313f, 0xb0073e6641a963d8, 0xb064e5a9fd7e2dcc, 0x4fffbaf1ee59880b, 0x64529c0c679d7808, 0x6c931f6ba29ec9a0, 0x751dd74afcbc2008, 0x99bf384f74376823, 0x71307945d4fd2625, 0x057c42893528dc03, 0xdc8a0f53e34d5dd0, 0xfe1ba8a7a06dad1a, 0x3cb3f5ff4a736363, 0x546d835a179b7461, 0xf81054783edda2a1, 0x5bc712338ef69026, 0xb7888e0e139ae429, 0xfcd54870f20a84ef, 0x72eaf2b8963e42a0, 0x0efe696cafebe633, 0xc588eef224a2326a, 0xdb6548162c9150f1, 0x3cc53d656edd2a97, 0x400a3657b0606d35, 0x15ea54070dd5c0a4, 0xf83fe9a2c25b6806, 0x70d9756137bff307, 0x8f5852d80cc00533, 0xdee562c25ed687d7, 0x67524ea1d1372912, 0x29590f3eb0f41431, 0x63503fa129724c3c, 0xecb680f94dd97ef2, 0x50c8686e622491a4, 0x65aa7d66fd77a951, 0xd59469d5419a5506, 0x36d6b1b84b560efb, 0x2bab7c30f450bbab, 0x82a395bafc65c459, 0x14536052fb6b03c6, 0xbd731f5316fea5f6, 0xc12056e17b77ba00, 0xd818a44f6a909f57, 0xda02bbaa94837ca7, 0x26893ce73a19ac32, 0x0e100ce4020b3ef0, 0x31e39a35000c6c8a, 0xa1e3e4186ca902ee, 0xa3544c8cac22f844, 0x4caf9062b56bc828, 0xd7f3ae36f6405058, 0xb0bf41056b8eeee9, 0xc653cb0392daa9a8, 0x77d9fefdaa9aee8c, 0xafcb1ea85fb32223, 0x9c82afceafe0cb90, 0x68b6d11b92f615c4, 0xb22b08199f1208f7, 0xbbdf3e7782c6456b, 0xfe1b4d9234e828d7, 0x14bc40fe1fa54b32, 0x77f087b9fd61fc13, 0x8e0957b5556e75eb, 0xa64c56bd3de0e9a6, 0x0cd81b3698b27df0, 0x860853bcdf8628da, 0x720c9bd21b23a523, 0x0c59e5a8833d30e6, 0xcc3f6cca31487f24, 0x003db9bc3c812add, 0x53be8e065770d60a, 0xc4e958df047b7934, 0xd464019027a3990b, 0xbe7afe74d8b859b7, 0x6b4c95fbbb7c71ea, 0xb5bdfdc9ae0671ca, 0xd2e3a6fdb0736526, 0xc837f5c09914553a, 0x4e5a7adcd11dc004, 0x83508748b8fd716a, 0x7587378345344df6, 0x60b0dcba5a96977c, 0x483775f454ca2ec1, 0x652bcede5a51c6d2, 0x801ac44f4d57d3f1, 0xb2c3b136d6f88005, 0xaec2db54d24ace06, 0xb7ca06a55fbeea1c, 0xda16aacee01ebe3e, 0xfda54630af8da822, 0xbee91f14aae0b16c, 0x0e6548194ca0cc27, 0xffd0ab9665ba9799, 0x03b9be3779ffdb39, 0x2b28f4559536489c, 0x202bd625620e8693, 0x1277b38d3576c802, 0x98bf84463c217cba, 0x96423aedce9c82a1, 0x216ac10c5ffa2196, 0x8910c8fe914446eb, 0xaba69268ce8ba378, 0xb041d5d25d862c32, 0xca9b519a752b79e1, 0x041e6fe040a494f7, 0x4428a62bd329284a, 0x09775d44ea4c8e06, 0xd08adef600ab92be, 0xc38daea86443901a, 0xd4e7775d0a02742e, 0xd0296e6b732590c9, 0xc22ab33e427e7836, 0x3ca08101694cb7f0, 0xcd5922f3d760256f, 0x1d9f6caded5ef773, 0x7874d66a30586eed, 0x12a02c24ede42eb1, 0xccbc3461b33c8c5a, 0x5b6cbc82c6a9af3f, 0xaaa8ec1e74b317dc, 0x37131b7ebe930807, 0x04a47f21ea49e139, 0x5c423e94ca40316a, 0xda7e1ccd05d0eef5, 0x202706fb7a803f0a, 0x4ab7550ddf3a9e49, 0x10faa411233e8a4a, 0x3151085fa63c2ce9, 0x733da91dfda2b701, 0x5b187c17bb6fc398, 0x4937060e5cc1180d, 0x1addc649efd7d5a6, 0x94b181a7503744fd, 0x32a541af71477c98, 0x204d63399b656972, 0x3f544d10ad9c76dd, 0x0de74ac4ab9c8bb7, 0xe833692ee3bc5f39, 0x3ad59f0f66f4a5c8, 0xabfcea13dce7945f, 0x23f0f10d6326e5fc, 0xb65836bc65df1b65, 0x0bb867f9a2d74cb8, 0x8052b2459d255b86, 0x65f6d9fa5b138c85, 0x9b2f3f52c5705afc, 0x5aa0239f0a11e947, 0x74b41f3a0e396e28, 0x10ed4f0d6d0498fd, 0x8132c9285d88c0bd, 0x9d7e5d75243c7dcb, 0xfed4c9af17857c6a, 0xdd1d0adceba09591,
  0x10c569c8764ae257, 0x967144e84426dd63, 0x810ac0fdb9a6d2cb, 0x5753bf0e2d79b722, 0x99d121c6aeec5800, 0x79089672edc17f80, 0x074b68a31f8fbb38, 0xbfd9d70d85b79395, 0x630b42b490e3cab3, 0x46f75f2f0cb68011, 0x0b2130935335dfc4, 0x74b6940cde826bcb, 0x435c61b333e35499, 0xd344b363967e8243, 0xcd18023934dcb72f, 0xaab01675b54a4f06, 0x02ee02f878cf643e, 0x503b34edb2f14a0e, 0xe702e8d70a2f7a57, 0x683366e8507654dc, 0x485af4c9b79eef5f, 0x0cee1ec1dea093a7, 0xf4371607efa4258e, 0x18b163a78b01f259, 0xff60c1494d635d20, 0x70eaebe2cb317643, 0x0e1ac53a0c91a26f, 0x6a46700453adbfd4, 0x49008d84bb72e2b7, 0x33e91545c59d37bf, 0xd72b32c9b876d444, 0x7b0813db3ef983ae, 0x93fdbe3802b40a44, 0xbdc362b6eeb4ae29, 0x38d5ec4c6aa578e1, 0x0c77ff3a85f279a9, 0x184b390763fb86a4, 0xf9ca90201c876517, 0xdb148afad4e8885d, 0x3d2e69bd257e245d, 0x0d945431c1bd9fc9, 0x406b893206dddb1c, 0x75842fbef1d98e4c, 0xecd8280ba82ad7cb, 0xf78e93bcada5f322, 0xe81a0359d31b6fad, 0xcde20ab899fd5103, 0x934c4e8878e10d94, 0x745fda9093402042, 0x7aa4c825ec7c461f, 0x849e79941b2def5f, 0xec49c8e26545061d, 0xcc94a90a5f846502, 0x522e6a3a460e6b16, 0x265104b5b021e912, 0x6ea5fc471c843b85, 0xf25199dee0dbebf5, 0xc1ebdc682bb5fca9, 0x7742651d45ac1320, 0x4871e3228f9338f9, 0x832a56abf3339c2a, 0xf0cbe72ef27f0d3a, 0x7582e535a69f2953, 0xbdda516f6f4ed0b8, 0xb2b7b29657065224, 0xc8ca53e8db1017fa, 0x81d1ca5042a6c777, 0xddc54a7434ad9e10, 0xe993871a8187c652, 0x42f5efcc61bc4269, 0x9cefefd6c6517a42, 0xe95e281fabef70c8, 0x5748c1a2c95ac166, 0xcb489d97bd1ca3b8, 0x6fa83d3f18a33e81, 0x66d1745178da6661, 0x1962199d90dfe743, 0xdc5b8aab309f2c82, 0xc98cdab2637dd7d5, 0xdc43c9194cb0192e, 0x897eb57099ca5743, 0x93ae28e7eaae9602, 0x9fd402eca2a9fe5d, 0x186c272ba89771bf, 0x257dca16b4cc86ab, 0xc2fc698b5d2bfb33, 0xc0113a384ea000fa, 0x0d57594d4b8e2fff, 0x2f7cdd48b4024c1d, 0xe69f95fdd1216a24, 0xfb6c7df5086a44cc, 0x0d87ae2c56715268, 0xcd1627002377e621, 0x91b679fb44060050, 0x07ac03a1c92b1326, 0xcc7a15dc55adc9b4, 0x6771a30018573250, 0xf7682231090997d5, 0xfe7ece3dd2106416, 0x2b9380db437891b9, 0x63e4fac7306d2bb6, 0x8a096c744b52079f, 0x6258e7fe670ee3db, 0x834a48e7bae9717d, 0xd78de167224d27ab, 0x877f2d0dd4189778, 0x43ef6d22fcc336ec, 0x4b8186ac768c0f97, 0x5bba7c4a4b4844d6, 0x4183211ac8e2d3a0, 0x486ddacd9a338a19, 0xeddaff1ca8d0b283, 0x8d83298693342a96, 0x55b1ab13ab9623d4, 0xd5f7797d3ccc928c, 0x0fe7d257f7e2ddf7, 0x3d33b5364820fe12, 0x8458360d0731bad8, 0x44e9f06ef7b78aab, 0x9354339ee5ae00d1, 0x869d61d955f96333, 0x269b3c22f700f1fd, 0xcb1979367c2f40a6, 0x35da928458c504d7, 0xb3ff89b358aef6b4, 0x0c5341fac50648fa, 0xd06beeb21d50b5ee, 0xfac0c44cc9f0a296, 0x784fc80f33e36900, 0xa319c4d8fc351b55, 0x91da84d343de0ad9, 0x8c5d2ca36461551b, 0x70dac17c51957851, 0xfb0cabe3b07082c7, 0x476fa5d099930c74, 0x268e4794daf38b39, 0x15647a230a2e52c2, 0xaa481c24b942c7d6, 0xfa0c1957f7dfaad8, 0xd2edb6d2215c4485, 0xdc936efd60ed2b7c, 0x3b5a3112690b106c, 0xc1f030e9d1b96933, 0x00b3dcfe444fbf66, 0x5556aec7d1fc05c5, 0x29de45f9cba3bdf6, 0xf1c45b0f2bd9bc82, 0x56148666f280e608, 0xf77b919ca56a9660, 0x177c7f06ba059918, 0xf486c44536b50a76, 0xdc2abcbdd50414e8, 0xf2ea91d703716b18, 0xba58b5d39b2afb46, 0x8ef706f2b18a5b2f, 0xc8deba116601914d, 0x4b5e884d9f1f5484, 0x518c1eb5d48b496c, 0x76a6c2eb8e3a6b62, 0x26cc723b95c3c60e, 0x5b51f4b93539ad28, 0x69b0edc63a8a122f, 0x026c253766600a48, 0xc54afad71a595d10, 0x1237883b3f5800b9, 0x2a78875e6b16693b, 0xb12949f5f9b4b773, 0x275017e0012306f7, 0x634c769d9aede562, 0x142cbea7bb1c0e1d, 0x7f2b3a06add5554e, 0xd5a1bb40160aa790, 0x67a16d34a703bb23, 0xa373302a80c8378d, 0x6782cb2804174026, 0x28cb38ede2e116bb, 0x9bd5d4d0e820ce4c, 0x9dace58ec9142fd6, 0x15f1bf6c6b38f790, 0x073f1581d3df7f3a, 0xaf035ad9dbd95359, 0xc63510d2b4e58d37, 0x52b075535705685d, 0xb34fbd85e10087de, 0xc21317d8b9fac62b, 0xb89b8e3337503f24, 0x09b9aa99af5411fc, 0x4da37d2ad5210fa7, 0x365326fc9799bb55, 0xa70b4e29b8b0c0ac, 0x1cb073117f52293d, 0xe19947facb05d9a9, 0x4573ddf25807f17c, 0xde82b2f8e1bf3abd, 0xa90c60b2bf53652f, 0x8af26c53ea41defd, 0x439e96750cd0f280, 0x32831832bd19b303, 0xb3c0b677c8765743, 0xca6848f5eff47d52, 0x0edddc230e87b6f9, 0x566ae1c811652136, 0x162cd607dfd6d050, 0x76259a69e4451e76, 0xf6898763edfa6b27, 0xcfce8c6ff9356d3c, 0x06c712c107ea6929, 0xe6d21831c452ccaa, 0x96b98b1d129a0d48, 0x4c746f27c26d619b, 0x3528d7c64e7015b3, 0x27192643223e1bcb, 0x9fe8549a44343afa, 0x0cabde45a4a499c8, 0xffce0f5235f18350, 0x807163f2a6f290ab, 0x7274702820aab66c, 0xc0a8960982b98d48, 0x05863bcc7450681f, 0xaa920c912e2c42da, 0x8e28b6c5736b54cb, 0x3cedcc7aa9c20dbb, 0x3015c45085871581, 0xb59844f43ccc4357, 0x4a353b1c50aa0162, 0xce00712d30b46d65, 0x8af09e2514a5f973, 0x6b068f25bacbd1ae, 0xbf8b483032e990f3, 0xb2962e3974fabd6a, 0x436f8b556946bf45, 0xabcbed6f5e42f621, 0x38b4a0301f205fee, 0xb71a1b1e48fcddfe, 0xf552a5c4a9a4d56e, 0x195a6a5a17a4dcbe, 0x73615c076aae4a3f, 0x0bace7f6962081be, 0xb87aa7abb04585af, 0xd9edb0c1c846b777, 0x591515278155e572, 0x60fcefde283f1ebd, 0xf52d252beed1b8e2, 0xafdbc237cafdf52e, 0x65ccee8a920964c2, 0x8c9b857fb7e7daac, 0xa9575e2a505be814, 0x432834d7fca5bd7a, 0x906e393d453416cb, 0xbdfa091f1f6230d0, 0xfc5d3a2ff64aa805, 0xb619c195f01f6481, 0xe596fccf12335653, 0x53d26946df0bc698, 0xdf34a862fd3f988b, 0xaa8eb5af70c2ceea, 0xd35eace9d9853d4d, 0xef5dfd308525b743, 0xf32b19555170c3bb, 0x8305583a6ebd6435, 0xfa686a6cbd825948, 0x62a61fd730ea23a3, 0x839bd35ba5202c67, 0x5f072e2bfe8c26d9, 0x60659f309ed3ed94, 0xe20a9b626c36fc8e, 0x96a9029aeda86a5a, 0x54b3e042f7087eb3, 0x1218adaff2f4e589, 0xc902d96a4244bd45, 0xcb452b90ba36643d, 0x3cdd12c94f98c56d, 0x7e884333c26c8d93, 0xc0968e7a9e2f34fe, 0x1254d5e50888e30f, 0x3c1c13251970f76e, 0x6f0c664b9ed2076d, 0xc24fc3bfe737bb00, 0xdef57ff8f0a05922, 0x18a1c92355302367, 0x43d87bb9299e9033, 0xa00852963cb1da12, 0x9557e91098586b3b, 0xf53062facfd5edab, 0xacd862eca4bb57eb, 0xd4239586c1f0cae1, 0xc55703a85b86153e, 0x4370a6bc1ea3855f, 0x2c3fc3c5bc0a908f, 0xb4f4b4a832122275, 0xf6fd2c16c7c50c0f, 0x0441ead9dc4b470b, 0x407bd1b8a527474a, 0x578f435ab97bde0f, 0xf4a0d7694f8c0abc, 0x50527ba0db1dc626, 0xe3bcdae57243117a, 0xb43d0450a6a97a07, 0x3d7e0cd46d902191, 0x5f2301bd212b7b41, 0xe4754706b1b63044, 0xce71e7b2f9c60170, 0x2739f317c5528816, 0x76d7f3a7921b5312, 0x533f3c5fc681daaf, 0x034a3d695ef91aff, 0x45bc73f8058660c9, 0x98244d5db2872dda, 0x26795462b98578f6, 0xcc3b8b8369f4a105, 0x93ed020dfe141ab6, 0x659643d4ee26a05e, 0x361105939a3cd950, 0x4036f4b0137823c6, 0x44af24acfb526a9e, 0x4f891d69e5c103e4, 0xd0c407aead6af640, 0xa71b7c9ebb30cd21, 0x695a11b473c0f2a6, 0xda54801befd8c2ea, 0xb4674f288d86dfdd, 0xd329084dbdb7aff2, 0x7fe3f7f06f300083, 0x7cade742bd6aa499, 0x559205fd3cfb8be8, 0x77db743d34bcb954, 0x164295920623f9b7, 0xecd94d92f4d47d6c, 0x65209b67dd73e36d, 0x0ea3f53f385266c6, 0x4751b4b053ff77a4, 0x5751e01ee5be13f9, 0x81f9cae3a738037b, 0x13be2a394375a84a, 0x5d7b2a2bcd63e3c5, 0x2b28c055c785fbfd, 0x1192f9b16d965f56, 0xac11f03723cc4924, 0x2a46d35ec6cf5b3a, 0x21935e85e9a6caa7, 0xadc602269620fb55, 0x4ed2e82180a2cd3e, 0x80072aa22bfbae44, 0x76557c415c973e45, 0x87cf3279545e792e, 0xcaa58386e921a821, 0x54e047c2d84876d2, 0x4859a859dcebf704, 0xe634f690d2e7df78, 0x4050cab50e50a186, 0xb39087dcac7afee9, 0x1e552cc4eab400e6, 0x2a11eb9c4dab12e7, 0x2ea33c9bea4e5efa, 0x40db683762236923, 0x01e371a026b91575, 0x8d1cce4c5ecf6555, 0xdd7671590c3a327f, 0x9d91035022ec61d5, 0xb8e1eb4aba2717e0, 0x7a1e9b029d4430a6, 0xad33fbeb95c20a68, 0x2ee664f69fa0bde5, 0xe587b685fc4a5578, 0xcb008df5abdd2b05, 0x303f78bff03f1c53, 0x2b965ecba5a56b08, 0x163f03f5472963a1, 0xf0594a50bd9ab00f, 0xdd45a2c5246efd5f, 0x5f7263ca33de3c5c, 0xdf8d06d33ad99d7a, 0x5d85ecd5ed2a5a01, 0x6538654f81178bb5, 0xde5109ff40c39949, 0x06cc6e3817fc9226, 0xb88b957f0d892ff7, 0xd2954247b9361102, 0x48dd5053fab51041, 0x4d89a7bf13fbffd9, 0xc082da397551a22a, 0x79a47f1574708bbc, 0x941fcc87aa70e434, 0xeb4742e2eafb5106, 0x4c997033ba8c4a9f, 0xaf8357f21574acaf, 0x2c9893ab325768b9, 0x55904cc8f6188ad8, 0x67f07be18ae780b3, 0x44813fda006cb8f9, 0x2faef2756ee2176e, 0x76f1978d3b1271ce, 0x424c17bdd8df28cc, 0xe65d86621a302823, 0x8b02a88ef7c18e13, 0x4d165abd5991a5c4, 0x33e821ec3406ca88, 0xee6701a6f5e8b259, 0xffadfa8cdf17b316, 0x92936d4fbb35e124, 0xcc0a520c54eb3e82, 0xc5cef0a47a2683bd, 0x6edbfa66a4dc33a1, 0x660336f37e131678, 0x2f5c74bcf78a6642, 0x1d4d3071aadb6ba7, 0x9ea2710c6a6f745c, 0x16f786f8019e6c17, 0xcd4f7666a0c494f9, 0x6f4e3f9c1e5aaf50, 0x756c9070ffb929d8, 0x0b118177875e537d, 0x2894553302abf372, 0x5b0aac375e55df73, 0x21b4eb5786339dcb, 0x2902e3abb3fc43e6, 0xfca7b976e29ca090, 0xf2378d2080c57627, 0x60913f681c2f85cd, 0xd53b79674177ae1d, 0x733951245ae28716, 0x530c10b04dd108e6, 0xab2ef6d04efebc15, 0xa0d6ba250fa8acc5, 0x12af20dcf3453541, 0xfeac42852bd9a22c, 0x04afa2783278433d, 0x1a76154d6ae75892, 0x7bdbf348bad575fa, 0xa40c9e80fb543055, 0xd996bfb7c5819b2c, 0xe458b0a2bc2a4fd2, 0x4181292025a7d64f, 0x7beeed6210ffc06c, 0xc00400fc9750d631, 0x2fc6d1078ab9f234, 0x674d27e94184e9bc, 0xba8018846c715294, 0xe2f0e1bbe9ce3bb5, 0x06eec54984e77465, 0x142340ef2eb78a0b, 0x5d9783cf0a3d7ca4, 0xcd032d656f22a54d, 0x56774e86a7aa6643, 0xe46c6b9ed8ead053, 0x5d9146ff05016247, 0xf04641593ff7e9a6, 0xcb766385210ba676, 0xdd06b45c952b511d, 0x779bc41fed934b70, 0x9bd5fc2826e40f2d, 0xd5734bbdde77f860, 0xe832f72887383a24, 0xad628cfd80cb016a,
  0x051366f09752ce4c, 0x372cec067636c85e, 0x9b8d249fae3cd403, 0xfa2c4842944d7e8e, 0x76dccc0935663b65, 0xc5d28061c78dc8f1, 0xb0f820bfff1e42a3, 0x35e97b2f29a70ef3, 0x60503a8245f6e4a4, 0x5b78c007d421d2f9, 0x4044aaadbdc21456, 0xad2a1391edf1cdb7, 0x475c8c005ab4ada5, 0x1e382b47a25ffa29, 0x3a3303f614857e1c, 0xa888edfaa9af3f3d, 0x14095e9c8f49dad8, 0x680472045c179f4e, 0x2e8b4a705530a13e, 0x2d23af9970da1a93, 0xef2091e4bdc87f2a, 0xfca083c23efba8fe, 0x0cb10986c45d6b99, 0xcca612a79035bfa2, 0x64fd83abbf32f22f, 0x0b9abcbb616c5d8e, 0x927abf0efa070a9a, 0x4148109689d79d79, 0x7430643cef3ce61f, 0xe3588503920bdaaf, 0x496c1cd392fd8210, 0xe47e9459113747dd, 0x3b3e8918641d98c4, 0xcfd03bb98722a1f0, 0xcc07e02d5f18c751, 0xf3fc6611eb5fdf37, 0x64265af13fc7f2da, 0x042de20f6b9490b1, 0x8f2d6771a86f4cc6, 0x13535d57db759a51, 0x8ca569d09e57dd82, 0xd5e7d7f228ce3186, 0x388acc9a5978c81a, 0x5b9c090bbee02d0a, 0x6a1d457551413ec1, 0x4563d5613715e25f, 0xdcfae2f3357f7526, 0x61bcdcc61fd8bd38, 0x13980c4dd8e71ff1, 0x73137968f9d566ac, 0x3b6beeef9eda36a8, 0x5bb40acd056eca03, 0xef611efe0934b255, 0x1446e1a810c788fc, 0x3eb011715e6477b1, 0x4f09edd18c1e6d40, 0x427bacc3700ca0b9, 0xe97268243fd2ad6e, 0x318fdaf1b0aecc8a, 0x3a23a43f9a076d19, 0x52c9dab9e7cfb84b, 0x76124569b39d61c4, 0xe4328f050f3f378e, 0xf5277772cf6960b8, 0xeb3dafe772ca0098, 0x89eeb963b0e4ce3f, 0x8f358378a6a60554, 0x919a31c3c0eb1cce, 0xbd90e1e2a47cddc1, 0x6930080f9cd1e155, 0x13d96427109b8521, 0x653b49339465304b, 0x16189683fa4000ec, 0x0b9b18c61572eec6, 0xa9543dc453e28d72, 0xa93a969f0443e2de, 0x50309ec0bcb138a2, 0x385697d829b1ea09, 0xf273cae7ff7cdb00, 0x020e0f773d5a9781, 0xce6596b16dcb9fa4, 0x0a74939758f32f4e, 0x7474e167b1641e52, 0x47b8d3c1e5b55ad3, 0x184e5503456d33da, 0x477fecf2ce212072, 0x0cf12b8e052f12d7, 0x6bc96ee5fd26ed9a, 0x1fa901c96689ff59, 0xbca4218fe9ced08e, 0xca7c548e31afa849, 0x4dee256d28655994, 0xcaec9c564486fc2d, 0x5294eb6f8ba5d19f, 0x79b464e8e8169488, 0x35f9ec89042956ea, 0x0b092bfd5168b5b9, 0x0723f9d905d9300b, 0xaaa6cefb1f60a321, 0xe92b0410e1707d55, 0xd892bfdb99baf186, 0x2c3069e4c292b3b4, 0xf257f4a502b5ec92, 0x5e0c272f46fc384d, 0xcf4304410c44db94, 0x0801e18cd7f7566c, 0x5355d362013ba9dd, 0x1129d870950eaeaf, 0xd6708e703c4b50f7, 0xb1ad4a57622842d7, 0x7d53d8dd821c5966, 0x70e3db3b3ab9fbfb, 0xe9eb822f63d70847, 0x1fe1bec6448abd2b, 0x96e575d3d3840a4f, 0x0297b0789b85d734, 0xb43433d323404eb0, 0x34321330eca4b928, 0x40100cfb6f68ea0d, 0xee50f05c7fcbb60e, 0x09216b1dbcee77c7, 0x56fcbfb417866890, 0x4711529c13ac7859, 0x131c68fa816902df, 0xd5325ee2d45bc473, 0xa64def0e73650be5, 0x16f39a53a45c0b3e};

void print_hex(void* source, uint32 num_bytes) {
  // TEMP
  uchar* pointer = (uchar*)source;
  for(uint32 i = 0; i < num_bytes; i++) {
    std::cout << std::setfill('0') << std::setw(2) << std::hex << (uint32)(pointer[num_bytes - i - 1]);
  }
  std::cout << std::dec << std::endl;
}

std::string to_string_hex(void* source, uint32 num_bytes) {
  uchar* pointer = (uchar*)source;
  std::ostringstream string_stream;
  for(uint32 i = 0; i < num_bytes; i++) {
    string_stream << std::setfill('0') << std::setw(2) << std::hex << (uint32)(pointer[num_bytes - i - 1]);
  }
  std::string ret_string = string_stream.str();
  return ret_string;
}

std::string to_string_binary(void* source, uint32 num_bytes) {
  uchar* pointer = (uchar*)source;
  std::ostringstream string_stream;
  for(uint32 i = 0; i < num_bytes; i++) {
    for(uint32 j = 0; j < 8; j++) {
      string_stream << (((uint32)(pointer[num_bytes - i - 1]) >> (7 - j)) & 0x1);
    }
  }
  std::string ret_string = string_stream.str();
  return ret_string;
}

void pf_64_add(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - ADD] Input value not in field!" << std::endl;
  }
  doubleword r = (doubleword)(*a) + *b;
  if(r >= prime) r -= prime;
  *c = (word)r;
}

// Probably not needed
void pf_64_sub(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - SUB] Input value not in field!" << std::endl;
  }
  doubleword r = (*a > *b) ? (*a - *b) : (*a + prime - *b);
  if(r >= prime) r -= prime; // Needed for the unlikely case where *a == *b
  *c = (word)r;
}

void pf_64_mul(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - MUL] Input value not in field!" << std::endl;
  }
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));

  // Solinas indices:
  // s0: 00 01 02 03 04 05 06 07
  // s1: 08 08 09 10 11 12 13 14
  // s2: 15 09 10 11 12 13 14 15
  // s3: 00 15 00 00 00 00 00 00

  word temp_var;
  doubleword x_tmp;
  x_tmp = r & 0xFFFFFFFFFFFFFFFF;
  x_tmp = x_tmp + (((r >> 64) & 0xFF) | (((r >> 64) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) | (((r >> 72) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) << 8);
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  *c = (word)x_tmp;

  /*
  // Crandall reduction (requires prime = 0xFFFFFFFFFFFFFFC5)
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));
  word c_small = 59;
  doubleword q_i = r >> 64;
  r = r & 0xFFFFFFFFFFFFFFFF;
  doubleword t;

  // WHILE 1.1
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);
  q_i = t >> 64;

  // WHILE 1.2
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);

  // WHILE 2.1
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  // WHILE 2.2
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  *c = r;
  */
}

void pf_64_cube(word* c, word* a) {
  word t1 = 0;
  word t2 = 0;
  pf_64_mul(&t1, a, a);
  pf_64_mul(&t2, &t1, a);
  *c = t2;
}

void mds_vec_mul(word* vec_c, word* vec_a) {
  word tmp[t];
  word tmp_word = 0;
  memcpy(tmp, vec_a, t * sizeof(word));
  memset(vec_c, 0x0, t * sizeof(word));
  for(uint32 i = 0; i < t; i++) {
    for(uint32 j = 0; j < t; j++) {
      //std::cout << "a: " << to_string_hex(&(mds_matrix[i][j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      //std::cout << "b: " << to_string_hex(&(tmp[j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_mul(&tmp_word, &(mds_matrix[i][j]), &(tmp[j]));
      //std::cout << "a * b = c: " << to_string_hex(&tmp_word, ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_add(&(vec_c[i]), &(vec_c[i]), &tmp_word);
    }
  }
}

void hadesmimc(uchar* in, uchar* out) {
  // Create permutation by fixing master key to 0
  // Does R_f rounds with full S-box layers, R_P rounds with partial S-box layers, and R_f rounds full S-box layers

  uint32 R_f = 3; // R_F = 2 * R_f
  uint32 R_P = 39;

  // Values to work with
  word value_branch[t];
  
  // Assign values (Remark: This assumes that all input values are in GF(p), which is true with a very high probability for random 64-bit input values and p = 0xfffffffffffffeff.)
  memcpy(value_branch, in, t * sizeof(word));

  uint32 constant_index = 0;

  // First rounds with full S-box layer
  for(uint32 k = 0; k < R_f; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Middle rounds with partial S-box layer
  for(uint32 k = 0; k < R_P; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    }
    // Cubing for first branch
    pf_64_cube(&(value_branch[0]), &(value_branch[0]));
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last R_f - 1 rounds with full S-box layer
  for(uint32 k = 0; k < R_f - 1; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last round (without linear layer)
  for(uint32 i = 0; i < t; i++) {
    // Round constant, Cubing
    pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    pf_64_cube(&(value_branch[i]), &(value_branch[i]));
  }

  // Write to out
  memcpy(out, value_branch, t * sizeof(word));
}

int sponge_hash(uchar* message, uchar* hash, uint32 message_size) {
  // Assumes message_size mod 128 = 0
  uint32 num_absorption_calls = message_size / 128;
  uint32 num_r_words = 16; // 16 = (128 * 8) / 64

  std::cout << "Number of absorption calls: " << num_absorption_calls << std::endl;

  uint32 permutation_size = 192;
  uchar state[permutation_size];
  memset(state, 0x0, permutation_size);

  // Do the permutation with the initial state of all zeros
  hadesmimc(state, state);

  // Absorbing
  word* temp;
  for(uint32 i = 0; i < num_absorption_calls; i++) {
    // Add part of the input to the LS r bits of the state (don't touch the MS c bits)
    for(uint32 j = 0; j < num_r_words; j++) {
      temp = (word*)(&(message[i * 128 + j * 8]));
      pf_64_add((word*)(&(state[j * 8])), temp, (word*)(&(state[j * 8])));
    }
    // Permutation
    hadesmimc(state, state);
  }

  // Take LS 32 bytes of the final output (this can also be parameterized including a squeezing phase)
  uint32 hash_size = 32;
  memcpy(hash, state, hash_size);
}

int main(int argc, char** argv) {

  std::cout << "Starting..." << std::endl;

  // Print MDS matrix
  #ifdef VERBOSE
  std::cout << "MDS matrix:" << std::endl;
  for(uint32 i = 0; i < t; i++) {
    for(uint32 j = 0; j < t; j++) {
      std::cout << "0x" << to_string_hex(&(mds_matrix[i][j]), ceil(((float)n / WORDSIZE) * 8)) << "   ";
    }
    std::cout << std::endl;
  }
  #endif

  // We want a security level of 256 bits, so c = 512, hence r = 1536 - 512 = 1024 (so we can process 1024 bits = 128 bytes of the input wich each call to the permutation)
  // Initialize a (c*128)-byte input message to be hashed and an empty buffer for the hash (ignore padding and assume message_size mod 128 = 0)
  uint32 message_size = 3*128;
  uchar message[message_size];
  //RAND_bytes(message, message_size);
  memset(message, 0x42, message_size); // Each element should be an element of the prime field
  //for(uint32 i = 0; i < 16*3; i++) {
  //  memset(message + i * 8, i, sizeof(word));
  //}
  uint32 hash_size = 32;
  uchar hash[hash_size];
  memset(hash, 0x0, hash_size);
  std::cout << "Message: " << to_string_hex(message, message_size) << std::endl;

  // Call the hash function
  sponge_hash(message, hash, message_size);

  // Print the result
  std::cout << "Hash: " << to_string_hex(hash, hash_size) << std::endl;

  return 0;
}
