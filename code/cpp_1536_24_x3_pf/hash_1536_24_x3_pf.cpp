// Compile with: g++ -std=c++0x -g -O2 -march=native -mtune=native hash_1536_24_x3_pf.cpp -o hash_1536_24_x3_pf -lcrypto -lm

#include <cstring> // memcpy
#include <iostream>
#include <sstream>
#include <iomanip>
#include <openssl/rand.h> // For RAND_bytes(.)

#define WORDSIZE 64

//#define VERBOSE

typedef unsigned int uint32;
typedef unsigned long uint64;
typedef __uint128_t uint128;
typedef unsigned char uchar;
typedef uint64 word;
typedef uint128 doubleword;

// Globals
// Security level M = 256
uint32 n = 64;
uint32 t = 24;
uint32 N = 1536;
word prime = 0xfffffffffffffeff; // Solinas, 2^64 - 2^8 - 1

// MDS Matrix
word mds_matrix[24][24] =
  {{0x0aaaaaaaaaaaaaa0, 0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be},
  {0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550},
  {0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc},
  {0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3},
  {0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500},
  {0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e},
  {0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682},
  {0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8},
  {0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74},
  {0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644},
  {0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b},
  {0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580},
  {0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63},
  {0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440},
  {0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571},
  {0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da},
  {0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7},
  {0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc},
  {0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8},
  {0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b},
  {0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e},
  {0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0},
  {0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3},
  {0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3, 0xdf15f15f15f15e36}};

// Round constants (1104 = (6 + 40) * 24)
word round_constants[1104] = {0x31c11236b1d3aed8, 0xfa917d2702e6032b, 0xc206e3ff07cddbc7, 0x62de608cb8cc3b55, 0x99cba457b1f1a3a7, 0x64c452d725eb10f0, 0xfa426aa322e6b4da, 0x51f9dba2bb404df1, 0xc1e34a35044484c8, 0x45e2238ac981473f, 0xdc70bb7df0e4a768, 0xa8ea7cecec7f23ad, 0x4e1602af81f504ba, 0xfd32cb59c4e65291, 0x02af67ac1897ff10, 0xc25501933d6c930e, 0x9405dde1e25dead2, 0xa507336cf87c545f, 0x3cb375a96f8d0efb, 0x05b5860fdeeb75b5, 0x76d170875f289f2d, 0xc33393b5927515e5, 0x1118ea7bd63b43d8, 0xc85512b7669d9927, 0x518b689fb4e7f882, 0x7009baa617f4b7ae, 0x5c95a2a827c19cb1, 0x79195186bb3759a1, 0x2dabfc900e0fb94e, 0x57f99634ef9a9db6, 0xcf4c15cee01dacf5, 0xc9e66fe6bdfa9318, 0x9454b6448de34138, 0x7924cc30367dee55, 0x2b08b3d3f55eb4d6, 0xfc1b490aa7f2d25c, 0x81d6e2e1493b734c, 0x512d836b3081c67f, 0xe84fad675bd0083f, 0x069681057099a882, 0x61932f1af40d2f9d, 0xc42b4668c22b49b5, 0xf33909e282b1a246, 0xcddee157df9c5451, 0x04cee2cc82a967bc, 0x4f381aff8dbab83d, 0x895b501860e08d1d, 0x0cceb6e0d068d753, 0xafb5b86ede4a74f2, 0xb4aa3022530b55c7, 0xa317f41a96b9b1f0, 0x8a41392ebd12120a, 0x53e0b24b5be2a2ca, 0x542de1c6a8d4e032, 0xa7bc0b7590219323, 0x779a7756933e1d43, 0xb092865784f54a52, 0x1679ec0c17640ff0, 0xcda50b5d2802b7ea, 0xa0920f6d1573b56d, 0x0962308df3658e19, 0x57d40fee71ed8985, 0xfbe0a4e377d81b15, 0x626b3d9705a84ba4, 0x98bed3350871bd68, 0xd421eb4649dea689, 0x52ffbbbf7b1494b9, 0x33817959f03b5638, 0xe4be0b7e58a2ec59, 0xb6548370df5b9447, 0x5bc8dd879bd09cbc, 0x69b6aa86c79d4b56, 0xe06c65dbf23967a6, 0xf82688543b26e71c, 0xe3ac5644fbe907d6, 0x68c8f7ff7016f728, 0xe12e99401e0aca4d, 0x54a020e203d669ad, 0x31b762a0f70f3e7e, 0x57d9451bb1c36a7d, 0xb077d623b26421d4, 0x5439d519a224b16b, 0x25921e50f8e81a9b, 0x679669bc5fe0a611, 0x60a7f314694f1a9e, 0xff420bc3e72d657b, 0xd8aba0fd2d5336a5, 0xeb8a15d2ae237e66, 0x05b4a4d5e7e425eb, 0xeefe1fac428f202f, 0x7712598f06d65be7, 0x1a11766af22c5e05, 0x793bf90fa986fc0c, 0x12d04c5a71ab6257, 0xd0f61bb941fd3e5c, 0xa95c7826b2846158, 0x93fb6b6615f28d57, 0xf0ef7ab738fe7cff, 0xe8fa9aa3913114e3, 0x9e1847d1f8c1e5f2, 0xfe97ac85f67f75b6, 0xf0a047094f4127a9, 0x96a847d731bfc3f5, 0x64c552c72f1f6156, 0x60913f31ae19e29c, 0x1d76140d6e952f30, 0xfe0b7048af4d5ded, 0xf4bc55ade5ee8ef3, 0x413dd25c28da62d7, 0x968eacabdd9c745f, 0x1bd9b089ecaaa0df, 0x93054f75b723ac4e, 0x2ce48d00cf37ddc8, 0x5b2dc0f7ca9e4956, 0x85ad0ae299c12609, 0xb80f5dc6062b3eb4, 0x0b74e34f56b5b5d1, 0x128ddc90808097e3, 0xfcddf0e8ea2d01fa, 0x2164a4a31c13d1a0, 0xfe4d86b8a5a8f0c6, 0x3d992f257659b7a4, 0x4d1251893be0c566, 0x86c517da22e1f579, 0x649af4675c2163d6, 0xcd2edb2062f05874, 0xe6712f833d5becc0, 0xcb0de4a36207611a, 0x580a97d94a99708e, 0x229db707c7db5ace, 0x9c5a335cda1085a7, 0x4eef75f368f4e68a, 0xf18e464a5a66c740, 0x8a892a0d76df4861, 0xff333a27df230ec6, 0x352c672a79fb3a4d, 0xe06bf22e9f8a6f7d, 0xd4e7cc746dc073f6, 0x1c63316785ec26ea, 0x49f10ad1c891c66c, 0xb9f5905b9ebb3a10, 0xf71a299192ca63dd, 0x27306a1219254f34, 0x1189ac9a8952dafa, 0x06b3fad1abe9cf37, 0xa859c154fb428844, 0x426420e7e6ea73e0, 0x32898f18e7eb92fb, 0x9186f19afa3fb501, 0xfde31776b4c4de82, 0x614648d7e289bbd7, 0x4df1c7f739620fc7, 0x2ba7112461fb96bc, 0xef2e7101419aabe8, 0xf3b57c501e7a70fe, 0x67ba91d19ce89709, 0xb87062baac8056b7, 0x6882b92e45902971, 0x1052ff99185412d5, 0x0e61de01e75fa746, 0x25e8f0d8231a510c, 0x88dc902b8bcec6ba, 0xc27e6fd8e39814c4, 0x2a85235c6648a83f, 0x716060c8cabb634c, 0x0cbd7d174dcf11a7, 0x8d2a5ddd1775a8e9, 0x169e4f47a230b22f, 0x666a8b7f90b7a1d2, 0xd425ce7ffad39351, 0x5b0f337e874b1af3, 0x895f7efec5dde061, 0xd8118e9eef655c33, 0xba57f43f74c23b45, 0x0dbb32e3e22d8c53, 0xcabd3230b149f2a1, 0xf76646465f72752a, 0x7e6a5e8bf2b8a1d2, 0xd58ad9e534652766, 0xc2acf51ed84b6d54, 0x68c61e9bdb522af2, 0xb357ad407b57f678, 0xb41d3c05763557b0, 0xb80ceb2ef5cdb793, 0xf773592527eed355, 0x3fe97b5f9aea3eda, 0x51f6feb115df0d0d, 0x698d4f29f5083fe2, 0x78f7a708536d6e3e, 0x65ee8a2f99e6f1b5, 0x64ad98421c808e90, 0xf91a09e97047c65e, 0xd51e04bf6d4f62c2, 0xd03d4559cbb67ee1, 0xfb76515c1c56ff3d, 0x8166417c8a5ebb52, 0x3b554eeb45b24000, 0xb2d3ebfc2d7fcd60, 0xcda4da8fa4e6c59a, 0xbbc39dbba002423a, 0xab4684cc3125fd6a, 0xca9ffd9bcc81fef5, 0x51bd0501a0bd1014, 0xd7eb2e6e8df79c59, 0x37c1e72ef86ce633, 0x27f05078d058b34d, 0x21a3e66b954ae1bd, 0x6ca3ddd5b60b3bc1, 0xf8f19655e4e73cde, 0x08acceaf31381a5a, 0xe6d803b2de0152df, 0x234c874972c8b499, 0x350422638cf717e2, 0x78856abe04349b12, 0xc3748ec408c79ce2, 0xa2cafdb000a81a2e, 0x780b84fea53548e4, 0x0c5002f8cffe5b02, 0x13fe8791a248498d, 0x1a5be3c274f2f024, 0x17ffc7e13d6a5d5e, 0x4b4cd84b25c17ef7, 0x59db5277bd7ff99b, 0x57dde1d330082944, 0x6bc83be436994469, 0xf548c911a39133df, 0x9bd529d1bc846220, 0x8659e5f47aa8b7c2, 0x749d8bed90552ed6, 0x458061672f3d0493, 0xf8bb16ac797743a6, 0x3da9c7dc17ddfd1b, 0x9cf8158c1eb9115c, 0x40fbd4ee18ef976d, 0x4a32e29731b2f4ab, 0x4b35e8a40cea4069, 0x530ed4cff5b51a0f, 0x8ea20ef718ba759e, 0x5fda3725999566d9, 0xbac06e3a837ac951, 0xbb16bbbd58992888, 0x80a29747c50e818f, 0x27b76d08ad483619, 0xf37d8917233444bb, 0x4ae7519a612e4486, 0x32966b9b69de2170, 0x420a513b2684a139, 0x042e312bed3c75f3, 0xbce48a0dab2e43df, 0xb3fcfcf28b5ea352, 0x0873a18473083067, 0xf446d6f9bffe104e, 0x082e1d2420e05617, 0x54b1d63c80b8c52d, 0xaa6deffb18eb98f8, 0x69ab048cc8efc78e, 0x1081ae61f6146568, 0x14d1df069f54d1af, 0x552b56bd7232480f, 0x9e81861f5656736a, 0x69f9fdc33ac62fcb, 0x7a81c29547e98620, 0x4203ef602dfca8d9, 0x0360fbd244a26401, 0xe8d99598dd6027f8, 0xa782b8e4c412556f, 0xd7810ab1e9c02a73, 0xc2950a83013465fb, 0x3a9df37b2c7d66ec, 0xe962448e98e5e3b7, 0xff31c505a65b65c0, 0x0ca0dae6241365b2, 0xe6b99409b4120a51, 0x17957215eddb6547, 0x31da8cc3ee4f0c45, 0xea163f3969384fdd, 0x87d24d272161f527, 0xc2fafc788b5121ac, 0x17aa468476f3cfa3, 0xdaac73c6a0efb355, 0x2a585e2970704d6f, 0xbfc5d4902e16a0d2, 0x4b93fb66d5786f7e, 0x2c54190bc701f2a2, 0x4949514e75717498, 0x1df2a621005e78fa, 0x299b3755adb419fe, 0x59e955453bf82ae3, 0x363c447cbd084b24, 0xeac811eb208a36ff, 0x49d48a660b0f14bc, 0x259f088fdd87cfa4, 0xa3f728fff33d887e, 0xc8c42c7e0f2fe4bf, 0x5a8719d35ac2e6d6, 0x793d40eddcf1fc6d, 0x06852e0b96043c0e, 0x193b17d577d94e37, 0x42daec400301ecbc, 0x030a3780e39f7678, 0x09396d401c90f720, 0xed4c1f6ab2772b8d, 0x34c557e2ace9a48b, 0xb458e5b251d7f2f5, 0x5db748ee9f4cbe6f, 0x6436effe3a96a0f0, 0x0be2318a1b1a6b9f, 0xe8dc36861d36d554, 0x0d0144d261f6a75f, 0xe83a5980b5fb09b5, 0x6cca1dc63bf6cf75, 0x0d36da04a54b0ffa, 0x7eea93bc79feb8f6, 0x00d7444ae1cd1143, 0x479c99fbbce71ce6, 0x2d500ab91f342ea7, 0x6a6e6369a72dbc47, 0xcfd27f6e49918a1e, 0x00988be9bc2823a5, 0xe5918ce78c250cc8, 0x86ea0fe853005c31, 0xe4f26190a4f27b0a, 0x271b0a1ba9b2ed7c, 0xcabf1c3c42c3aa2f, 0x1dc642de167e4348, 0xbcb26ee210011009, 0x60abd2bdd815a9e9, 0xfcdff54ef93914d0, 0x46fde3973fc16188, 0x326796dd9b98d6a6, 0x7acc40b9e80845c5, 0x7c0c4fb48516ea7c, 0xf2556fdd4ee44d72, 0x8a599ffecbad21ce, 0xfc1d7f7a1a6625f9, 0x19fb92730db06de2, 0x016d59b019128148, 0xb333352fc82286b7, 0x8e0178fcbd1c1ab6, 0xb473dfbee78445ac, 0x62c1ee700cb91ecd, 0x6999226e5821b4e9, 0xa120238ae9fb7db9, 0x2c097f8abb9fa32b, 0x95ceca100465f615, 0x02d6d0033ceeb8b1, 0x7901dbaa8f688a7d, 0x2fbe07fdc2d974df, 0xe1f3c4afc3c0779e, 0x3d49aacb97e27695, 0xcfe86f7ab43070b9, 0x7bd8b47114fbe464, 0x006a2372b5e98d7d, 0x721b144c2b9f68d4, 0xa935db3cbbe21df0, 0xa21084e335fe664c, 0x5771293e5a700b92, 0xf47c15c8aebec188, 0xd9c21036c03aea0a, 0x547ed0c18c453a02, 0x0a517105ceaa01a3, 0xa37eccbc9e15aa16, 0x3bc64d35b5a44a85, 0x0c313514701bde15, 0x1a25d1d3f23e4142, 0x8c09acd8105faf28, 0xa19f0e613366e427, 0x670c548896b333fa, 0xf558c48bf22ab926, 0x11d221503ad30565, 0x85e4b7b991041f24, 0x9b32aa6f2125f335, 0xfa063e5e84c76de9, 0x09b18a70120f5bcc, 0x4fa2cbdd2dcf3b51, 0x850f8137330d99eb, 0xb7377bd2e07b5779, 0x543f3047fae51467, 0xd5104b4dab8cc0fd, 0x3b011d6efa34ed5c, 0x26a9b6fcecc4b68d, 0x0cb4ae99894fb526, 0x27b0fd36096bf883, 0x10568db1bb6f7cf0, 0xc60e867b880311f6, 0x94f074cb2769e047, 0xb849717888d2edf4, 0xc759f2942a78ebc8, 0x0ecc368d31cd663e, 0xb4b5b67ba163cbb0, 0xa81be03e222fb06f, 0x1786d798556b69b2, 0x4dbdda57136dbec1, 0x8507fcb3cbcce23c, 0x00f0dc8342577b94, 0x5db09da6153b3b7a, 0xf7b84612c4e29f19, 0x539040c5ed6af4e3, 0x6af6705785bbf6ba, 0xeaa18350165ee348, 0xfc23d7c2a38c2c71, 0x8eae95d22bc40a14, 0x2345a431c9736520, 0xb6418114ebe35a08, 0x0aa013e211864bac, 0xe594a6b7b2296961, 0xcfb3605b1c1f3773, 0x2bbd76ae49ed33e0, 0x204e8228bbcb37c5, 0xf92bbbca63902135, 0xac3ba48b17157300, 0xca8188299f1cc0ec, 0xdf632c518d2dc2dc, 0x98d4b93001c9f296, 0x390eca02ba8f4c1e, 0x99ac52d43484034f, 0x31ca83cc4858982d, 0x83b306f1b34c272e, 0x5e8dcf0a1af671dc, 0x1cbf0f54c170a416, 0x56bd2e08a3411b93, 0x8e58cabf3e384e24, 0x634091ca78dcea68, 0xb52fb2b0012768ee, 0x3f55a2b43669bfc0, 0xc21d2f264d32d915, 0xfc60e6ef92abfca1, 0x7ed25d4e556d6db1, 0xe3eb8014c930ffff, 0x09b4edeeb6a744e6, 0x24c9b11d02fc1220, 0x8c5f395da815e3e8, 0x73fee37aa744736a, 0x87daa575e4944d20, 0xcad213b3a1bc5452, 0x9f33c7d21855af64, 0x5ff04de3340bb1c2, 0x1b113f9d5e63e606, 0x7476a2e17c7d7e9c, 0xcd571fca3c82ff46, 0x5d4c59a91af2730e, 0xf0ab95b992295c70, 0x650738f2609161a7, 0x054eb0645dca484e, 0x8af31349a6317756, 0xd0fa0da2c3c6cfd8, 0xddcde1b874f1dde9, 0x06373c307cdc180b, 0xfa3ab6af5a80a17d, 0xd68ca597015151cc, 0x805c1cd52e3cb6fe, 0x9528d66edcabf4b0, 0x56ecf31b5c6ee245,
  0x0fb61883c1ef3048, 0x3d0a76652a9ff0a7, 0x60a36a31d29cc063, 0xf3393f2d5a5d6d79, 0x771525987b2af077, 0xd6117a168f3a98c6, 0x3ebd0b3e0d138444, 0x04cc5205e2bfbe97, 0xa363b8ecf88ccf1f, 0xeff504e49dd8f7b3, 0xee7c032aab53123a, 0xb3ed2e35eeae0db8, 0x43f53da423b37922, 0x365b13567d8f78f8, 0x0f74df22e6b0183d, 0x806e9c69c6025e78, 0xbfe07c32cb8f9836, 0xffe42b39f65f063d, 0x6403b623c67c7fba, 0x8d23b6d4bd8c5901, 0xe745b6627c697165, 0x313b23c709c4ece1, 0x2d6b76d9becddf54, 0xd1c7406e3adbd3f9, 0x89f86935040952e9, 0x4d7122188124c6ad, 0x237c10f17d1d7a24, 0x95cde4b91d649544, 0x1492dce2cdd52395, 0x48a36f9aa4c4fd66, 0xfb899b6784850f4e, 0xbf7f5a0b240d5a08, 0x51208c26b6b850de, 0x00ae9c38e78aadd5, 0x39816dc56d122854, 0xd0cca95f813ebbd4, 0x1012143c05c73e34, 0xfb15db6f41ac8052, 0x2b1b4a153cd41bcd, 0x939e1865615adc7f, 0x4ae6e75a5f26c881, 0xbf6a6b5e5bc9c009, 0x2b731e869d53b463, 0xefe744f596a8edf3, 0x6aab3e326fdd6c6d, 0x36da18bfc97e7edc, 0x19719484c13e0c7f, 0xcdfd11a24da21878, 0x14e583c3d5ce2f6c, 0x1f0de558a490085b, 0x4c456be7d524b58b, 0x4fbe7c83305c0188, 0x63d525b79fe4be56, 0x91d98609189d5b6f, 0xae4726b81bb5c313, 0x50c710cd8a3229d6, 0x67e3a795d755505e, 0x12bd3ee098b7526c, 0x15e904e3970625a3, 0x5719802cf5c3053e, 0x782ad32fdd3aef3c, 0xb036e34f9f1dc42e, 0x677c3e22b91d96e7, 0xdbaa0b3e7b49c3d0, 0xc8083c23f4c3b19f, 0xd988de06b2c89315, 0x872227d87584520b, 0xc9e751a6ca26f387, 0x6524a0423de00fdb, 0xc3efa04cba7dd140, 0xc1e7fafbdc1e8b8e, 0x369bc331cebda5cc, 0x16a45868497de113, 0x272da408db6f954a, 0xf94ade5ee41793e9, 0xe409e1a6f83592ef, 0xe0a0e9bde7a424a4, 0xaf02fe1bbfd65e17, 0x8495aef1acdf2cab, 0x125253555245044b, 0xda38336b478b2135, 0xa007185bc452cca2, 0x27dbb215f4bc22ba, 0x975e5a3b184ae8b6, 0xc243df5f873209c5, 0x40060c1b4a981341, 0xd743dd1769840799, 0xd43b055f152beb22, 0x80ea1bca1590268f, 0x5011e94850b95937, 0xadb713e74e484eb0, 0x842b2f82e9bffaae, 0x19a5f1fe50b04f17, 0x847901ef1b054de6, 0x553eed6a7c794f69, 0x5ca1943cd287a817, 0x4d38acfc4be8c316, 0x5d2929dddeeecf48, 0xe81306aadec65d52, 0xcbaddb72abc93466, 0xe8195df8e2be5d46, 0x1502ef5810a21d3f, 0x29f50cb19a871365, 0xc3d0839a423beba0, 0xc868ae2445a00064, 0xe56f68f22b4b3d77, 0x55072f3c7634e841, 0xef273e4ff9afccf1, 0x3c5d33c7b870e7c1, 0xc55678c0770419d7, 0x085a4db47c2e8282, 0x8370019947a81d26, 0x7cf8dcd8dbe40498, 0x28ccbc181802fcd6, 0xa04bee0bf11d1092, 0x34db8057ab9cf82b, 0xd4201f4d77dfc788, 0x1937dfa54e4c9940, 0x921f3c5421796692, 0x7724bc4ea789d7e5, 0xe5baf8872b3aa86b, 0x2e8092c4fe65b284, 0x6fb3b514c6d6628c, 0x1bfd4d1cd148fc9c, 0x994b1514b7f94458, 0xb47c360cf78f35d4, 0x615177e075bcaed5, 0xe89afecabbb34d4e, 0x577be32dbb10cd2c, 0x474eac14c6b640ba, 0x5f0327e03b4f21e1, 0x722569ee81185c87, 0xbaf6acd0727cabeb, 0xd7d14924c8875db5, 0x4866058132594df1, 0xbab263b7b85f6dc6, 0x11d2e44260bbb0d9, 0xb70fd8b2ef9d2796, 0x02a1d09bc2ab4a03, 0xb39558dc8714b24b, 0xa07b796e8c85f77c, 0xd7bc8879852f7450, 0x2884a42994bcfea0, 0xe58cc92494e8d07f, 0x22c7af507b54aa6d, 0x3f24cc10ae5dae45, 0x45afa9a58088d8ef, 0x229e02e54f7cef8f, 0x2193ca5a6c3fdca8, 0x50a573153ebf76ae, 0x576f15e648510efa, 0xefa95f2fdd5bb4fe, 0xf00cbfae975900d7, 0x38de4aec2a19a509, 0x12bcb9d2a2e40fe8, 0x8fe1038698055183, 0x0f99994344c3f286, 0x32d6cf2272a1cc53, 0xaa07b5aad4e71a63, 0x75714a8afe14ef16, 0x6617e1dbfb2c7465, 0x9a49169675fbf94b, 0xbc2f69e03b781697, 0x1b63a0e23aa925c8, 0xee28d0cede07ced1, 0xffc5f20a3844ff97, 0xcbfb3adb935bb494, 0x9583b4eead8d4880, 0xd884d741093a6e5a, 0x744eee531a16c078, 0xdb82ff6aaaea93cc, 0x99d8b2b982fc4718, 0xdb2fe5934fbc9174, 0xb193cd987a16e438, 0x5e2a965e8c4591ed, 0x053b73762eb17750, 0xfbd1453a131657c7, 0xab35dcdaf2da6737, 0x2442e800fb3f5eaa, 0xe2625964f16ecbb7, 0xd0b916b050a1d40b, 0x3b5ab98696be20d5, 0x09b5f7f39f37ca59, 0x9985ccd9af30b166, 0xfbcad48597c41932, 0x5f53e45d31438675, 0xeecf736affc84e49, 0xb3a7e4dfe2239ab6, 0x926bc0b41474a45f, 0xe6eb95df50336d2d, 0xd7b91179e8c04495, 0xfa357b39bbb7d4b1, 0xed99248dbfef1a4e, 0xe4381ca42fbd296f, 0x3a86f8e6cf76ce7d, 0x0a888ae95455e2aa, 0xd5aab95fa2ee0dd9, 0xca2c51283734fdd5, 0x01636c86314f108d, 0x4bf11f496d63a55d, 0x6b3312645476f525, 0x316fd41310e7c7e5, 0xc09ade69d7dc2efe, 0x048f7ea6fe2a0aae, 0xf136da047154e282, 0x4aa032d8005d49ce, 0x98892c73d9d21b98, 0xe1a744eddff12a7e, 0xc38075223842614f, 0xe1e558cb6d74cf02, 0x36678a78a212f943, 0x8aa2d7b576b2b0b4, 0xe0b96afba344e936, 0x724628a023920f9b, 0xfaa2ddd9ed2fa557, 0xfb876cc425e4752a, 0x6690b165bfef2076, 0x6cce80495102065f, 0xf38537c10baac2fb, 0x74a9b900d20a0167, 0x51ae2ec266995eb0, 0xde9d2ec2bc2cfa82, 0x21456047b8624351, 0x708c7c185a17994d, 0x3f0877bb419b42b6, 0x2628782c8aa93d86, 0xd0e7c35342ee0aac, 0x332806fcb577f094, 0x2b17dece1cae15dc, 0x1b44d15f0cdc18ac, 0x41e8890934946b97, 0xe983ef05c55a4f68, 0x70b8bad0e3ac20a9, 0x4d537a97f4aa1551, 0x5e67d9711f2f7fdb, 0x6988cb83cc8773ec, 0x2bac30b6f1468adf, 0xe5845cae9b8beb20, 0x2a56dd9cf87a3cad, 0x48c545fdd907a602, 0xa99bb9c77b1265f0, 0xc208c07776d23eae, 0x08766d61a84137cb, 0x687535530a7bb72b, 0x5b16d0a418fc461c, 0x2e06b70f1e19a9c6, 0xecab056570555c72, 0xad1c1f2f3076c43f, 0xd4bc38fd22fd8413, 0xfb1cab45b96fa8de, 0x966e24bec4e733df, 0xfcb524671f4a1ba2, 0x313d46065d6c9636, 0xb73e2f6c9a652eba, 0x0f0317db855891e3, 0x934efb77d666c311, 0x2eba3ea9aa17f1fc, 0xcd51ae395e833f07, 0x40f934bcd10642a7, 0x681853ce04c2a879, 0xf02d0383afc64337, 0x2a4fd40ace60db39, 0x0ffc57e5983444ad, 0xdd8fef9e19b269e1, 0xa28d0e1013ce1390, 0xd9faa33c5c336c83, 0xca4465b244514ee5, 0xddb8ab247f4471d6, 0x9ae1d4e3468cdb94, 0xcddfcf49e29057ac, 0x2d2a3d26381a4743, 0x3591f34156944a5b, 0xd10e67081cfd1717, 0x57eeec1972f1406e, 0xe613468453d0d9a7, 0x7a61dbe3cd0d88dd, 0x664dc3080178dc1c, 0x1bb30d5f6658e9f4, 0x21d660e252a9cf31, 0xa7809854d1640f28, 0x59bda1271550e413, 0x96a562c9cdc2a830, 0x4bded55cbada03c3, 0xe8316beaecb34a44, 0xbe0bbe71d93883cc, 0x9cc465c046198488, 0x8482fe3f0c45aed9, 0xc5a0a3ceb5fce9c1, 0x65cea64a3e25f62f, 0xc71a5cf70643258c, 0xb12d72721dc29210, 0x81fec42738f28383, 0x40c50adcbf8a7f02, 0xfbedd7673621dbdf, 0x35e07437437b972e, 0x4c30501459aee9dd, 0x4f58d514f8441a13, 0xf7626abcbc1fa137, 0x4cf4c20d88658b9f, 0x61a9abeb8f6b1c98, 0x8f95d917cb67c28c, 0xcd49a4fab4a42339, 0xf451d8a6f6e563b5, 0x54489933cceadebc, 0x5c90d39a754c3ae3, 0xa937747d1740d63e, 0x21cd4706965513a3, 0xe52f9b98e0a09972, 0x5d9c8422a05b6dc8, 0x08dd95491a7f9955, 0xb792375440a3b312, 0x512eb2d4944dd850, 0xac817c1af5dc39cb, 0xa34051a3a9068b36, 0x4e3a35e0dd307841, 0x9883d53b3c12a9b3, 0xf21413d9e761dc1a, 0xfc3c69e1075f859f, 0xee31e1d4e4e6407f, 0x033fc7bc04aec433, 0x1263f1ffec64540e, 0x5b743e4146f9dae0, 0x257861c4f3103e06, 0x082e00b68d0483ae, 0xa04cb7139f01cd00, 0x972abbd9407942ff, 0x5ce7057c9c29fb46, 0x8aa9250afabadd7f, 0x84c714cdda4e9553, 0x5dcf4a30c7cfe77a, 0x45c38ed407bb143f, 0x870336df984f148f, 0xc2d7978a1e47acaf, 0xa68961942fc104a8, 0x2b81c7d6f0a43621, 0x13935dbee698d501, 0x42ac9e26140a111a, 0x644ac7ab6bbe54e6, 0x3986b80b0262edf2, 0x2b06e884a8085966, 0xb6bcfde9af819733, 0x185949d732b9494e, 0x2bce17e8eb3bd889, 0x412ae13e64bdb00d, 0x657a10a23684641f, 0x982a60effaf9e292, 0x1025fad331c4c478, 0x19fca7f478de886d, 0x901c64bfd5289fc0, 0x3863bad5db96c42b, 0x0eeb7c2271c813c0, 0x812664519171cafc, 0x414134626593fb3d, 0xc04a07c314c033a7, 0xe8ccf1e9a900edc3, 0xdcbba402bd2adf11, 0x7480460d8bb957bc, 0x9ef6475b488a5ea3, 0xc874cc1f1004a9be, 0x175cc630c1d8ff00, 0x23fe94372a43ad6a, 0xcebdf60a4b605241, 0xb0bf1e4372b91bd0, 0xb330e20a6fe4a52b, 0xea6aff85ddafd3ba, 0x501d9b7b6e05a716, 0x8cd1f5c7232224f6, 0x7f6ab8abd2e62e74, 0x8fa253c24226f427, 0xe53214b9a69beefd, 0x1bdf994e0aaa3384, 0xff6276245e8089f8, 0x9afa9e69db55558b, 0x21a4af721e048ede, 0x17a443459072e70c, 0xa986b5e85c85fc37, 0x8ebd981f8a2ba946, 0x7ed3434831dac1ba, 0x4a6e4ed1bae31dea, 0x21f89fc412f9ef13, 0x73d064771f8e3c1e, 0x01e0e46b34329018, 0xf0f2e0b1e7efe0e9, 0xb27cd676264d707d, 0xa6d568d438c3ffc0, 0x5191a919db87ff09, 0x3928e20987ea0ff9, 0xee507ca20cda39ff, 0x3e36656933da80f2, 0x7f74ebcdd3fca538, 0x4dfb7e6a98667e60, 0x7406adf85f865259, 0xc3d1781e8377922b, 0x0ea5f7188eddaebd, 0x4e054d74f7d3389e, 0x9be7430d246079ed, 0xa3ad67bb3e198151, 0x761d8260bb694bbf, 0x1b555d7734f48647, 0xfff30db3a9f116cc, 0x7205be354750a158, 0x20c26da7602eb85b, 0x79950a70c6b6de8e, 0x38cf7d15a0f3e9e6, 0xb7cf9d5a8b728c6d, 0x63cbf85c23942a2f, 0xb3d62b5da2c35c2b, 0x4b64fe37619a8e31, 0xa6576ddc218e724d, 0x4ae391a850c68d13, 0x2f9cf97cb0279c99, 0xb6c5f5f190ad9b5c, 0x58f92cf1d0498d52, 0xbb5043de8825a4a2, 0x3f63c7cca1432c70, 0x98740ab20847a6be, 0xffb104aae06120d4, 0x62a6e6ada791b6bf, 0x0df39fa208ea52be, 0x0d5807ab88999645, 0x6c30101aa1e87690, 0x3920395649365275, 0xf426a967002c61ae, 0xcbe9bb81dd0ab999, 0xe61c9153e7b1b28f, 0x708f899059d6f4ea, 0xfd9adc0acaca40c6, 0x4b873892fd8bae11, 0x5328e8f2c8155c62, 0x371c6d3e93483247, 0x9e0b309ac1072609, 0x26c70028d81d667c, 0x821547fee5a5c98d, 0xebb5c313041325f5, 0x1fde39f0e5d9c04f, 0x06f7d0c44f06b2f5, 0x8969e48a81c5367c, 0xf258606c3939acd3, 0x3de47d621cd2b5fb, 0xddfa6866f19f36ac, 0x58010c2680854b64, 0x510a8aed1936e424, 0x66ea007dc3eb3853, 0xe9a93ed7086f2d94, 0xf039b2178049c58c, 0x7fe2b4639bd3f74d, 0xd02b9e655a072a9f, 0xba6bf7e73e5bb69e, 0x93cd2b8a58e55747, 0xe139d9cfd6872d93, 0x896604f6213541d6, 0x812d1739af460cb5, 0xdb5d6f3a71e05211, 0x144959d186056dbe,
  0xd720d24eae777c61, 0xbc81edccbe24f5e4, 0x665dcf3b8fc25cea, 0xa5c11032a410b307, 0x1991b74727fd56e8, 0x54f2dcc3405a4136, 0xe11acdfc6cc99928, 0x78df436d76711ff1, 0x724831b06868f076, 0xf0387284f70c329e, 0x8dccaf52898358b4, 0xaa275741d8a82661, 0xefc74f6dcc6f030d, 0xb1558e4699b6f5f7, 0x94d7c5a5853745cb, 0x3f88fa98ae5a5000, 0x45f00aa586756fcc, 0x458a6f448e0528da, 0x25a2e06eac86a003, 0x4f742a8a2688e00d, 0x8adc265616fda908, 0x901344bd3fd44931, 0x5a3661e1bb2386d3, 0xabe95217d9cabb1f, 0x0e0e7a1312a28493, 0x97f1b8340c63ba1e, 0x9e5fd54d2d365d5e, 0xc1f6f8f630109e90, 0xe5bbd5301f88ee2c, 0x447d53dbdd381803, 0x29d59bd3e237a7f7, 0xd7a62dc9d5cb728f, 0x0a5943702b4b3993, 0x1a774e94dc39bac1, 0xcc31f1e1e9442dd1, 0x37f2e7eac7991a5f, 0x369d6592d2fe1ae7, 0x2654d15648faa86d, 0xa9401aeadb3184b0, 0xb1d0009e88c75e73, 0xb811e2f1a1d14092, 0x35f76880ba361f65, 0x47f1a4e12d25f754, 0x242098089faedddf, 0x9c69c77e0e8e4ed8, 0x5d1538c95214a924, 0x4a9b46a2f451f9c4, 0xc61a9d8bc23bd278, 0xc4afa6efa789eac7, 0x7a1d1d41f7c2a9d9, 0x2459732f2242378a, 0xede4df18ac92efd7, 0x90ef5f9ecef40be2, 0x40080fed2365d353, 0xa742e1b91cfe27b3, 0x76536eba677517a2, 0x0e4d3512e35b45ed, 0xdb339009abd6de1a, 0xcbd4644fd64a094b, 0xe237dbd9a5ca64bf, 0xfb12b3f7e35bc073, 0xd89bb366fccffc75, 0xc2f751f35791513a, 0x2655f0c09a7b3654, 0x95f984c3ea8e326e, 0x9d58af44d5b8b992, 0xc27716d00f0e6871, 0xaf1c101a10f63e2d, 0x0fca87e75b35baf3, 0x6cd1e456c75cbe99, 0xdc43095683e2c791, 0x15aa80aec7711610, 0x38917a435515bb35, 0xa6b1025173914ab4, 0x338a6b9a8158d849, 0x0d6be73e50bb73d0, 0xfade864656188063, 0x666aefee0dd5467a, 0xad702fc52be2fd47, 0x711535a23963da84, 0x5fab7093f53c5c13, 0x5fb29bfb2e884ff7, 0x6f5644e89fd8be52, 0xac9076a162567353, 0x0307d8dba9111267, 0xc280a4175873c294, 0x3e98a363fa76158b, 0xfbec768658e89243, 0x031563fa5d2a9ad6, 0xe202510ec0ed7c62, 0x06d5da6dc22b7422, 0x66698a0dd46f3b5b, 0x3747529c2af3eafa, 0x0af211ba51c248ab, 0x0ae6f753f6fa6b03, 0x6279e51bfb42fc29, 0x5dbe18a43ce22264, 0x155b4bb0f11fc282, 0x40b24bb78cd79464, 0xad1bf7074f07104e, 0x6912aedf8a115291, 0x610a6d62e2d9d541, 0xc0ace68933ba10ef, 0x0e06dbf243666beb, 0xab63a52a7a347f01, 0xb69f6fb73383b8bb, 0xea9f9aa4455e73cc, 0x7c1c05dc43eee546, 0xc4e12f5aa494ab5e, 0x8c8ec09c1e534cc5, 0x2a107686a46d453e, 0x670af68674fb1d38, 0xcc8709a7a6bda531, 0xff1be533eeea60fd, 0xf8a68136c992d6ab, 0xce2213302d50c9da, 0x7238fb632c6583fb, 0x4b056980cd707ace, 0x501276029d7320d0, 0xae452083a456d93d, 0xfd3d5044dec394a3, 0xed444206d485ff14, 0x508c8c8f1eed4f26, 0x71667e2b6c44541b, 0x38c415ba69605686, 0x69e052323f4380e3, 0xe92a65d0359d95df, 0x73c8bbaee4a74d8b, 0xc41523bf353ea55d, 0x910d34a9a1511f64, 0xff53657787038481, 0xf79dfbe62f5929a5, 0xad79d858b022ede4, 0xc10ce703eac3720a, 0x23df1129b8e84383, 0xd2c79c3e69da0ae4, 0x888b78b655197710, 0xf4b73573261a4ea7, 0x9b66e85352966bb8, 0x17fe252fecf594aa, 0x952b38b36dc454b4, 0xe1c69ec27020a9cc, 0xbc6bb736aa73de89, 0xb9ff59ae92809ac8, 0x2781b68b070a6c19, 0x01618ce073aca3dd, 0x3c256801c67022f6, 0x1b26e33405dff60b, 0x52b559f1b9857d9f, 0x6e34dd4cd1a970db, 0x5c4950a3797702e2, 0x20f65ec2b3e91429, 0xf6f78a263a89edd7, 0x01c3929d693145db, 0x2da6a9bc6457a49a, 0xf4113301084c595b, 0x1cd92d1d62195845, 0x1f61e762f1896771, 0x926ce0dc0118c97f, 0xcd976d276642f7e8, 0xa7f3a83b15968e03, 0xa8ce387c51a91bb2, 0xc4a0330607ba0e30, 0xd30486f502d5f8c5, 0x2006b4f3084f57de, 0x2f0f2d86ef8b4438, 0x55d630fab75ee77b, 0x7e10d1aa87d12e04, 0x313ba37e29c6190f, 0x7114b151813490b0, 0x06de8c7b3f34dc76, 0x26bba7771c407a69, 0x5db27bceb1bb11c3, 0x3ab029c2158e156f, 0x7f63b0ed493352a3, 0xdf6c35705ab4f3dd, 0x8c42d5b880a48ecb, 0xb6c714e154b43782, 0x37fb03e572dbe0b3, 0x80c2cf36dea3ac37, 0xe3f62464a39c6028, 0x1522ff0b7320fda9, 0xb7c12e5103673a6c, 0xd378edd27cb69131, 0xae157ee4826d8848, 0x16a7a5a8d3fc75b7, 0xd72932cf10dd6a63, 0x581ee6827979cc62, 0x620f5637714c2c6c, 0xabbf0e5b49f2d4be, 0x436a101d748433ce, 0x5c5fdf8ebc7c3275, 0x75d901dac50d4f53, 0xe57f12b6845345c3, 0x632713d0e2f09dee, 0x959e199641658a2a, 0xd94375610aa29b74};

void print_hex(void* source, uint32 num_bytes) {
  // TEMP
  uchar* pointer = (uchar*)source;
  for(uint32 i = 0; i < num_bytes; i++) {
    std::cout << std::setfill('0') << std::setw(2) << std::hex << (uint32)(pointer[num_bytes - i - 1]);
  }
  std::cout << std::dec << std::endl;
}

std::string to_string_hex(void* source, uint32 num_bytes) {
  uchar* pointer = (uchar*)source;
  std::ostringstream string_stream;
  for(uint32 i = 0; i < num_bytes; i++) {
    string_stream << std::setfill('0') << std::setw(2) << std::hex << (uint32)(pointer[num_bytes - i - 1]);
  }
  std::string ret_string = string_stream.str();
  return ret_string;
}

std::string to_string_binary(void* source, uint32 num_bytes) {
  uchar* pointer = (uchar*)source;
  std::ostringstream string_stream;
  for(uint32 i = 0; i < num_bytes; i++) {
    for(uint32 j = 0; j < 8; j++) {
      string_stream << (((uint32)(pointer[num_bytes - i - 1]) >> (7 - j)) & 0x1);
    }
  }
  std::string ret_string = string_stream.str();
  return ret_string;
}

void pf_64_add(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - ADD] Input value not in field!" << std::endl;
  }
  doubleword r = (doubleword)(*a) + *b;
  if(r >= prime) r -= prime;
  *c = (word)r;
}

// Probably not needed
void pf_64_sub(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - SUB] Input value not in field!" << std::endl;
  }
  doubleword r = (*a > *b) ? (*a - *b) : (*a + prime - *b);
  if(r >= prime) r -= prime; // Needed for the unlikely case where *a == *b
  *c = (word)r;
}

void pf_64_mul(word* c, word* a, word* b) {
  if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    std::cout << "[WARNING - MUL] Input value not in field!" << std::endl;
  }
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));

  // Solinas indices:
  // s0: 00 01 02 03 04 05 06 07
  // s1: 08 08 09 10 11 12 13 14
  // s2: 15 09 10 11 12 13 14 15
  // s3: 00 15 00 00 00 00 00 00

  word temp_var;
  doubleword x_tmp;
  x_tmp = r & 0xFFFFFFFFFFFFFFFF;
  x_tmp = x_tmp + (((r >> 64) & 0xFF) | (((r >> 64) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) | (((r >> 72) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) << 8);
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  *c = (word)x_tmp;

  /*
  // Crandall reduction (requires prime = 0xFFFFFFFFFFFFFFC5)
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));
  word c_small = 59;
  doubleword q_i = r >> 64;
  r = r & 0xFFFFFFFFFFFFFFFF;
  doubleword t;

  // WHILE 1.1
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);
  q_i = t >> 64;

  // WHILE 1.2
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);

  // WHILE 2.1
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  // WHILE 2.2
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  *c = r;
  */
}

void pf_64_cube(word* c, word* a) {
  word t1 = 0;
  word t2 = 0;
  pf_64_mul(&t1, a, a);
  pf_64_mul(&t2, &t1, a);
  *c = t2;
}

void mds_vec_mul(word* vec_c, word* vec_a) {
  word tmp[t];
  word tmp_word = 0;
  memcpy(tmp, vec_a, t * sizeof(word));
  memset(vec_c, 0x0, t * sizeof(word));
  for(uint32 i = 0; i < t; i++) {
    for(uint32 j = 0; j < t; j++) {
      //std::cout << "a: " << to_string_hex(&(mds_matrix[i][j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      //std::cout << "b: " << to_string_hex(&(tmp[j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_mul(&tmp_word, &(mds_matrix[i][j]), &(tmp[j]));
      //std::cout << "a * b = c: " << to_string_hex(&tmp_word, ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_add(&(vec_c[i]), &(vec_c[i]), &tmp_word);
    }
  }
}

void hadesmimc(uchar* in, uchar* out) {
  // Create permutation by fixing master key to 0
  // Does R_f rounds with full S-box layers, R_P rounds with partial S-box layers, and R_f rounds full S-box layers

  uint32 R_f = 3; // R_F = 2 * R_f
  uint32 R_P = 40;

  // Values to work with
  word value_branch[t];
  
  // Assign values (Remark: This assumes that all input values are in GF(p), which is true with a very high probability for random 64-bit input values and p = 0xfffffffffffffeff.)
  memcpy(value_branch, in, t * sizeof(word));

  uint32 constant_index = 0;

  // First rounds with full S-box layer
  for(uint32 k = 0; k < R_f; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Middle rounds with partial S-box layer
  for(uint32 k = 0; k < R_P; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    }
    // Cubing for first branch
    pf_64_cube(&(value_branch[0]), &(value_branch[0]));
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last R_f - 1 rounds with full S-box layer
  for(uint32 k = 0; k < R_f - 1; k++) {
    for(uint32 i = 0; i < t; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last round (without linear layer)
  for(uint32 i = 0; i < t; i++) {
    // Round constant, Cubing
    pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    pf_64_cube(&(value_branch[i]), &(value_branch[i]));
  }

  // Write to out
  memcpy(out, value_branch, t * sizeof(word));
}

int sponge_hash(uchar* message, uchar* hash, uint32 message_size) {
  // Assumes message_size mod 128 = 0
  uint32 num_absorption_calls = message_size / 128;
  uint32 num_r_words = 16; // 16 = (128 * 8) / 64

  std::cout << "Number of absorption calls: " << num_absorption_calls << std::endl;

  uint32 permutation_size = 192;
  uchar state[permutation_size];
  memset(state, 0x0, permutation_size);

  // Do the permutation with the initial state of all zeros
  hadesmimc(state, state);

  // Absorbing
  word* temp;
  for(uint32 i = 0; i < num_absorption_calls; i++) {
    // Add part of the input to the LS r bits of the state (don't touch the MS c bits)
    for(uint32 j = 0; j < num_r_words; j++) {
      temp = (word*)(&(message[i * 128 + j * 8]));
      pf_64_add((word*)(&(state[j * 8])), temp, (word*)(&(state[j * 8])));
    }
    // Permutation
    hadesmimc(state, state);
  }

  // Take LS 32 bytes of the final output (this can also be parameterized including a squeezing phase)
  uint32 hash_size = 32;
  memcpy(hash, state, hash_size);
}

int main(int argc, char** argv) {

  std::cout << "Starting..." << std::endl;

  // Print MDS matrix
  #ifdef VERBOSE
  std::cout << "MDS matrix:" << std::endl;
  for(uint32 i = 0; i < t; i++) {
    for(uint32 j = 0; j < t; j++) {
      std::cout << "0x" << to_string_hex(&(mds_matrix[i][j]), ceil(((float)n / WORDSIZE) * 8)) << "   ";
    }
    std::cout << std::endl;
  }
  #endif

  // We want a security level of 256 bits, so c = 512, hence r = 1536 - 512 = 1024 (so we can process 1024 bits = 128 bytes of the input wich each call to the permutation)
  // Initialize a (c*128)-byte input message to be hashed and an empty buffer for the hash (ignore padding and assume message_size mod 128 = 0)
  uint32 message_size = 3*128;
  uchar message[message_size];
  //RAND_bytes(message, message_size);
  memset(message, 0x42, message_size); // Each element should be an element of the prime field
  //for(uint32 i = 0; i < 16*3; i++) {
  //  memset(message + i * 8, i, sizeof(word));
  //}
  uint32 hash_size = 32;
  uchar hash[hash_size];
  memset(hash, 0x0, hash_size);
  std::cout << "Message: " << to_string_hex(message, message_size) << std::endl;

  // Call the hash function
  sponge_hash(message, hash, message_size);

  // Print the result
  std::cout << "Hash: " << to_string_hex(hash, hash_size) << std::endl;

  return 0;
}
